# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lpwan_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lpwan_swig')
    _lpwan_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lpwan_swig', [dirname(__file__)])
        except ImportError:
            import _lpwan_swig
            return _lpwan_swig
        try:
            _mod = imp.load_module('_lpwan_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lpwan_swig = swig_import_helper()
    del swig_import_helper
else:
    import _lpwan_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _lpwan_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _lpwan_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _lpwan_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _lpwan_swig.high_res_timer_epoch()
class dsss_interleaver_bb(object):
    """
    Interleaver block for LECIM DSSS Phy.

    Interleaves the tagged input stream (unpacked bytes). The length has to be 256, 384, or 512. Std. 23.2.4

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_interleaver_bb.

    Args:
        len_tag : length tag key
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len_tag):
        """
        make(std::string len_tag) -> dsss_interleaver_bb_sptr

        Interleaver block for LECIM DSSS Phy.

        Interleaves the tagged input stream (unpacked bytes). The length has to be 256, 384, or 512. Std. 23.2.4

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_interleaver_bb.

        Args:
            len_tag : length tag key
        """
        return _lpwan_swig.dsss_interleaver_bb_make(len_tag)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_interleaver_bb
    __del__ = lambda self: None
dsss_interleaver_bb_swigregister = _lpwan_swig.dsss_interleaver_bb_swigregister
dsss_interleaver_bb_swigregister(dsss_interleaver_bb)

def dsss_interleaver_bb_make(len_tag):
    """
    dsss_interleaver_bb_make(std::string len_tag) -> dsss_interleaver_bb_sptr

    Interleaver block for LECIM DSSS Phy.

    Interleaves the tagged input stream (unpacked bytes). The length has to be 256, 384, or 512. Std. 23.2.4

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_interleaver_bb.

    Args:
        len_tag : length tag key
    """
    return _lpwan_swig.dsss_interleaver_bb_make(len_tag)

class dsss_interleaver_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_interleaver_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_interleaver_bb)> self) -> dsss_interleaver_bb_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_interleaver_bb)> self, dsss_interleaver_bb p) -> dsss_interleaver_bb_sptr
        """
        this = _lpwan_swig.new_dsss_interleaver_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_interleaver_bb_sptr self) -> dsss_interleaver_bb"""
        return _lpwan_swig.dsss_interleaver_bb_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_interleaver_bb_sptr
    __del__ = lambda self: None

    def make(self, len_tag):
        """
        make(dsss_interleaver_bb_sptr self, std::string len_tag) -> dsss_interleaver_bb_sptr

        Interleaver block for LECIM DSSS Phy.

        Interleaves the tagged input stream (unpacked bytes). The length has to be 256, 384, or 512. Std. 23.2.4

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_interleaver_bb.

        Args:
            len_tag : length tag key
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_make(self, len_tag)


    def history(self):
        """history(dsss_interleaver_bb_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_interleaver_bb_sptr self, int which, int delay)
        declare_sample_delay(dsss_interleaver_bb_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_interleaver_bb_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_interleaver_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_interleaver_bb_sptr self) -> double"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_relative_rate(self)


    def start(self):
        """start(dsss_interleaver_bb_sptr self) -> bool"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_start(self)


    def stop(self):
        """stop(dsss_interleaver_bb_sptr self) -> bool"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_interleaver_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_interleaver_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_interleaver_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_interleaver_bb_sptr self, int m)"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_interleaver_bb_sptr self)"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_interleaver_bb_sptr self) -> bool"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_interleaver_bb_sptr self, int m)"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_interleaver_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_interleaver_bb_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_interleaver_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_interleaver_bb_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_interleaver_bb_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_interleaver_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_interleaver_bb_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_interleaver_bb_sptr self, int which) -> float
        pc_input_buffers_full(dsss_interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_interleaver_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_interleaver_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_interleaver_bb_sptr self, int which) -> float
        pc_output_buffers_full(dsss_interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_interleaver_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_interleaver_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_interleaver_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_interleaver_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_interleaver_bb_sptr self)"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_interleaver_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_interleaver_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_interleaver_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_interleaver_bb_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_interleaver_bb_sptr self) -> std::string"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_interleaver_bb_sptr self) -> std::string"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_interleaver_bb_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_interleaver_bb_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_interleaver_bb_sptr self) -> long"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_interleaver_bb_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_interleaver_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_interleaver_bb_sptr self) -> std::string"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_interleaver_bb_sptr self, std::string name)"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_interleaver_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_interleaver_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_interleaver_bb_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_interleaver_bb_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_interleaver_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_interleaver_bb_sptr_message_subscribers(self, which_port)

dsss_interleaver_bb_sptr_swigregister = _lpwan_swig.dsss_interleaver_bb_sptr_swigregister
dsss_interleaver_bb_sptr_swigregister(dsss_interleaver_bb_sptr)


dsss_interleaver_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_interleaver_bb = dsss_interleaver_bb.make;

class dsss_codes(object):
    """generates the codes needed in PHY"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def generate_gold_code_uc(seed, length=20000000):
        """generate_gold_code_uc(int seed, int length=20000000) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
        return _lpwan_swig.dsss_codes_generate_gold_code_uc(seed, length)

    generate_gold_code_uc = staticmethod(generate_gold_code_uc)

    def generate_gold_code_f(seed, length=20000000):
        """generate_gold_code_f(int seed, int length=20000000) -> pmt_vector_float"""
        return _lpwan_swig.dsss_codes_generate_gold_code_f(seed, length)

    generate_gold_code_f = staticmethod(generate_gold_code_f)

    def generate_ovsf_code_uc(code_index, log_spread_faktor):
        """generate_ovsf_code_uc(int code_index, int log_spread_faktor) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
        return _lpwan_swig.dsss_codes_generate_ovsf_code_uc(code_index, log_spread_faktor)

    generate_ovsf_code_uc = staticmethod(generate_ovsf_code_uc)

    def generate_ovsf_code_f(code_index, log_spread_faktor):
        """generate_ovsf_code_f(int code_index, int log_spread_faktor) -> pmt_vector_float"""
        return _lpwan_swig.dsss_codes_generate_ovsf_code_f(code_index, log_spread_faktor)

    generate_ovsf_code_f = staticmethod(generate_ovsf_code_f)

    def generate_combined_code_uc(seed, code_index, log_spread_faktor, length=20000000):
        """generate_combined_code_uc(int seed, int code_index, int log_spread_faktor, int length=20000000) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
        return _lpwan_swig.dsss_codes_generate_combined_code_uc(seed, code_index, log_spread_faktor, length)

    generate_combined_code_uc = staticmethod(generate_combined_code_uc)

    def generate_combined_code_f(seed, code_index, log_spread_faktor, length=20000000):
        """generate_combined_code_f(int seed, int code_index, int log_spread_faktor, int length=20000000) -> pmt_vector_float"""
        return _lpwan_swig.dsss_codes_generate_combined_code_f(seed, code_index, log_spread_faktor, length)

    generate_combined_code_f = staticmethod(generate_combined_code_f)

    def invert_code_uc(code):
        """invert_code_uc(std::vector< unsigned char,std::allocator< unsigned char > > const & code) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
        return _lpwan_swig.dsss_codes_invert_code_uc(code)

    invert_code_uc = staticmethod(invert_code_uc)
dsss_codes_swigregister = _lpwan_swig.dsss_codes_swigregister
dsss_codes_swigregister(dsss_codes)
cvar = _lpwan_swig.cvar
dsss_codes.intlvr_seq256 = _lpwan_swig.cvar.dsss_codes_intlvr_seq256
dsss_codes.intlvr_seq384 = _lpwan_swig.cvar.dsss_codes_intlvr_seq384
dsss_codes.intlvr_seq512 = _lpwan_swig.cvar.dsss_codes_intlvr_seq512
dsss_codes.preamble16 = _lpwan_swig.cvar.dsss_codes_preamble16
dsss_codes.preamble32 = _lpwan_swig.cvar.dsss_codes_preamble32
dsss_codes.sfd16 = _lpwan_swig.cvar.dsss_codes_sfd16
dsss_codes.sfd32 = _lpwan_swig.cvar.dsss_codes_sfd32

def dsss_codes_generate_gold_code_uc(seed, length=20000000):
    """dsss_codes_generate_gold_code_uc(int seed, int length=20000000) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
    return _lpwan_swig.dsss_codes_generate_gold_code_uc(seed, length)

def dsss_codes_generate_gold_code_f(seed, length=20000000):
    """dsss_codes_generate_gold_code_f(int seed, int length=20000000) -> pmt_vector_float"""
    return _lpwan_swig.dsss_codes_generate_gold_code_f(seed, length)

def dsss_codes_generate_ovsf_code_uc(code_index, log_spread_faktor):
    """dsss_codes_generate_ovsf_code_uc(int code_index, int log_spread_faktor) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
    return _lpwan_swig.dsss_codes_generate_ovsf_code_uc(code_index, log_spread_faktor)

def dsss_codes_generate_ovsf_code_f(code_index, log_spread_faktor):
    """dsss_codes_generate_ovsf_code_f(int code_index, int log_spread_faktor) -> pmt_vector_float"""
    return _lpwan_swig.dsss_codes_generate_ovsf_code_f(code_index, log_spread_faktor)

def dsss_codes_generate_combined_code_uc(seed, code_index, log_spread_faktor, length=20000000):
    """dsss_codes_generate_combined_code_uc(int seed, int code_index, int log_spread_faktor, int length=20000000) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
    return _lpwan_swig.dsss_codes_generate_combined_code_uc(seed, code_index, log_spread_faktor, length)

def dsss_codes_generate_combined_code_f(seed, code_index, log_spread_faktor, length=20000000):
    """dsss_codes_generate_combined_code_f(int seed, int code_index, int log_spread_faktor, int length=20000000) -> pmt_vector_float"""
    return _lpwan_swig.dsss_codes_generate_combined_code_f(seed, code_index, log_spread_faktor, length)

def dsss_codes_invert_code_uc(code):
    """dsss_codes_invert_code_uc(std::vector< unsigned char,std::allocator< unsigned char > > const & code) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
    return _lpwan_swig.dsss_codes_invert_code_uc(code)

class dsss_diff_coding_bb(object):
    """
    Differential Coding for LECIM DSSS Phy.

    This tagged stream block performs differential coding described in Std 23.2.5. Input and output are unpacked bytes.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_diff_coding_bb.

    Args:
        len_tag : length tag key
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len_tag):
        """
        make(std::string len_tag) -> dsss_diff_coding_bb_sptr

        Differential Coding for LECIM DSSS Phy.

        This tagged stream block performs differential coding described in Std 23.2.5. Input and output are unpacked bytes.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_diff_coding_bb.

        Args:
            len_tag : length tag key
        """
        return _lpwan_swig.dsss_diff_coding_bb_make(len_tag)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_diff_coding_bb
    __del__ = lambda self: None
dsss_diff_coding_bb_swigregister = _lpwan_swig.dsss_diff_coding_bb_swigregister
dsss_diff_coding_bb_swigregister(dsss_diff_coding_bb)

def dsss_diff_coding_bb_make(len_tag):
    """
    dsss_diff_coding_bb_make(std::string len_tag) -> dsss_diff_coding_bb_sptr

    Differential Coding for LECIM DSSS Phy.

    This tagged stream block performs differential coding described in Std 23.2.5. Input and output are unpacked bytes.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_diff_coding_bb.

    Args:
        len_tag : length tag key
    """
    return _lpwan_swig.dsss_diff_coding_bb_make(len_tag)

class dsss_diff_coding_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_diff_coding_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_diff_coding_bb)> self) -> dsss_diff_coding_bb_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_diff_coding_bb)> self, dsss_diff_coding_bb p) -> dsss_diff_coding_bb_sptr
        """
        this = _lpwan_swig.new_dsss_diff_coding_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_diff_coding_bb_sptr self) -> dsss_diff_coding_bb"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_diff_coding_bb_sptr
    __del__ = lambda self: None

    def make(self, len_tag):
        """
        make(dsss_diff_coding_bb_sptr self, std::string len_tag) -> dsss_diff_coding_bb_sptr

        Differential Coding for LECIM DSSS Phy.

        This tagged stream block performs differential coding described in Std 23.2.5. Input and output are unpacked bytes.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_diff_coding_bb.

        Args:
            len_tag : length tag key
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_make(self, len_tag)


    def history(self):
        """history(dsss_diff_coding_bb_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_diff_coding_bb_sptr self, int which, int delay)
        declare_sample_delay(dsss_diff_coding_bb_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_diff_coding_bb_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_diff_coding_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_diff_coding_bb_sptr self) -> double"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_relative_rate(self)


    def start(self):
        """start(dsss_diff_coding_bb_sptr self) -> bool"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_start(self)


    def stop(self):
        """stop(dsss_diff_coding_bb_sptr self) -> bool"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_diff_coding_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_diff_coding_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_diff_coding_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_diff_coding_bb_sptr self, int m)"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_diff_coding_bb_sptr self)"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_diff_coding_bb_sptr self) -> bool"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_diff_coding_bb_sptr self, int m)"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_diff_coding_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_diff_coding_bb_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_diff_coding_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_diff_coding_bb_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_diff_coding_bb_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_diff_coding_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_diff_coding_bb_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_diff_coding_bb_sptr self, int which) -> float
        pc_input_buffers_full(dsss_diff_coding_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_diff_coding_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_diff_coding_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_diff_coding_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_diff_coding_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_diff_coding_bb_sptr self, int which) -> float
        pc_output_buffers_full(dsss_diff_coding_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_diff_coding_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_diff_coding_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_diff_coding_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_diff_coding_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_diff_coding_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_diff_coding_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_diff_coding_bb_sptr self)"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_diff_coding_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_diff_coding_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_diff_coding_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_diff_coding_bb_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_diff_coding_bb_sptr self) -> std::string"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_diff_coding_bb_sptr self) -> std::string"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_diff_coding_bb_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_diff_coding_bb_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_diff_coding_bb_sptr self) -> long"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_diff_coding_bb_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_diff_coding_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_diff_coding_bb_sptr self) -> std::string"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_diff_coding_bb_sptr self, std::string name)"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_diff_coding_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_diff_coding_bb_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_diff_coding_bb_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_diff_coding_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_diff_coding_bb_sptr_message_subscribers(self, which_port)

dsss_diff_coding_bb_sptr_swigregister = _lpwan_swig.dsss_diff_coding_bb_sptr_swigregister
dsss_diff_coding_bb_sptr_swigregister(dsss_diff_coding_bb_sptr)


dsss_diff_coding_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_diff_coding_bb = dsss_diff_coding_bb.make;

class dsss_spreading_bb(object):
    """
    Spreads the already upsampled/repeated data with the goldcode.

    Input and output as unpacked bytes.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_spreading_bb.

    Spreads the incoming samples with the configured code. This block behaves like a tagged stream block, although it is an interpolator, because the output size of one packet could be very big. (big buffer, latency)

    Args:
        len_tag : length tag key
        spread_factor : spreading factor
        seed : goldcode seed
        reset_per_symbol : reset the goldcode after each symbol / after spread_factor input samples
        ovsf_code_index : 
        ovsf_log_spread_factor : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log_spread_factor):
        """
        make(std::string len_tag, int spread_factor, int seed, bool reset_per_symbol, int ovsf_code_index, int ovsf_log_spread_factor) -> dsss_spreading_bb_sptr

        Spreads the already upsampled/repeated data with the goldcode.

        Input and output as unpacked bytes.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_spreading_bb.

        Spreads the incoming samples with the configured code. This block behaves like a tagged stream block, although it is an interpolator, because the output size of one packet could be very big. (big buffer, latency)

        Args:
            len_tag : length tag key
            spread_factor : spreading factor
            seed : goldcode seed
            reset_per_symbol : reset the goldcode after each symbol / after spread_factor input samples
            ovsf_code_index : 
            ovsf_log_spread_factor : 
        """
        return _lpwan_swig.dsss_spreading_bb_make(len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log_spread_factor)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_spreading_bb
    __del__ = lambda self: None
dsss_spreading_bb_swigregister = _lpwan_swig.dsss_spreading_bb_swigregister
dsss_spreading_bb_swigregister(dsss_spreading_bb)

def dsss_spreading_bb_make(len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log_spread_factor):
    """
    dsss_spreading_bb_make(std::string len_tag, int spread_factor, int seed, bool reset_per_symbol, int ovsf_code_index, int ovsf_log_spread_factor) -> dsss_spreading_bb_sptr

    Spreads the already upsampled/repeated data with the goldcode.

    Input and output as unpacked bytes.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_spreading_bb.

    Spreads the incoming samples with the configured code. This block behaves like a tagged stream block, although it is an interpolator, because the output size of one packet could be very big. (big buffer, latency)

    Args:
        len_tag : length tag key
        spread_factor : spreading factor
        seed : goldcode seed
        reset_per_symbol : reset the goldcode after each symbol / after spread_factor input samples
        ovsf_code_index : 
        ovsf_log_spread_factor : 
    """
    return _lpwan_swig.dsss_spreading_bb_make(len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log_spread_factor)

class dsss_spreading_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_spreading_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_spreading_bb)> self) -> dsss_spreading_bb_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_spreading_bb)> self, dsss_spreading_bb p) -> dsss_spreading_bb_sptr
        """
        this = _lpwan_swig.new_dsss_spreading_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_spreading_bb_sptr self) -> dsss_spreading_bb"""
        return _lpwan_swig.dsss_spreading_bb_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_spreading_bb_sptr
    __del__ = lambda self: None

    def make(self, len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log_spread_factor):
        """
        make(dsss_spreading_bb_sptr self, std::string len_tag, int spread_factor, int seed, bool reset_per_symbol, int ovsf_code_index, int ovsf_log_spread_factor) -> dsss_spreading_bb_sptr

        Spreads the already upsampled/repeated data with the goldcode.

        Input and output as unpacked bytes.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_spreading_bb.

        Spreads the incoming samples with the configured code. This block behaves like a tagged stream block, although it is an interpolator, because the output size of one packet could be very big. (big buffer, latency)

        Args:
            len_tag : length tag key
            spread_factor : spreading factor
            seed : goldcode seed
            reset_per_symbol : reset the goldcode after each symbol / after spread_factor input samples
            ovsf_code_index : 
            ovsf_log_spread_factor : 
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_make(self, len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log_spread_factor)


    def history(self):
        """history(dsss_spreading_bb_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_spreading_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_spreading_bb_sptr self, int which, int delay)
        declare_sample_delay(dsss_spreading_bb_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_spreading_bb_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_spreading_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_spreading_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_spreading_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_spreading_bb_sptr self) -> double"""
        return _lpwan_swig.dsss_spreading_bb_sptr_relative_rate(self)


    def start(self):
        """start(dsss_spreading_bb_sptr self) -> bool"""
        return _lpwan_swig.dsss_spreading_bb_sptr_start(self)


    def stop(self):
        """stop(dsss_spreading_bb_sptr self) -> bool"""
        return _lpwan_swig.dsss_spreading_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_spreading_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_spreading_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_spreading_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_spreading_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_spreading_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_spreading_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_spreading_bb_sptr self, int m)"""
        return _lpwan_swig.dsss_spreading_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_spreading_bb_sptr self)"""
        return _lpwan_swig.dsss_spreading_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_spreading_bb_sptr self) -> bool"""
        return _lpwan_swig.dsss_spreading_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_spreading_bb_sptr self, int m)"""
        return _lpwan_swig.dsss_spreading_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_spreading_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_spreading_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_spreading_bb_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_spreading_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_spreading_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_spreading_bb_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_spreading_bb_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_spreading_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_spreading_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_spreading_bb_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_spreading_bb_sptr self, int which) -> float
        pc_input_buffers_full(dsss_spreading_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_spreading_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_spreading_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_spreading_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_spreading_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_spreading_bb_sptr self, int which) -> float
        pc_output_buffers_full(dsss_spreading_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_spreading_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_spreading_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_spreading_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_spreading_bb_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_spreading_bb_sptr self) -> float"""
        return _lpwan_swig.dsss_spreading_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_spreading_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_spreading_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_spreading_bb_sptr self)"""
        return _lpwan_swig.dsss_spreading_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_spreading_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_spreading_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_spreading_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_spreading_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_spreading_bb_sptr self) -> int"""
        return _lpwan_swig.dsss_spreading_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_spreading_bb_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_spreading_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_spreading_bb_sptr self) -> std::string"""
        return _lpwan_swig.dsss_spreading_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_spreading_bb_sptr self) -> std::string"""
        return _lpwan_swig.dsss_spreading_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_spreading_bb_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_spreading_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_spreading_bb_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_spreading_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_spreading_bb_sptr self) -> long"""
        return _lpwan_swig.dsss_spreading_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_spreading_bb_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_spreading_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_spreading_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_spreading_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_spreading_bb_sptr self) -> std::string"""
        return _lpwan_swig.dsss_spreading_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_spreading_bb_sptr self, std::string name)"""
        return _lpwan_swig.dsss_spreading_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_spreading_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_spreading_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_spreading_bb_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_spreading_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_spreading_bb_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_spreading_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_spreading_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_spreading_bb_sptr_message_subscribers(self, which_port)

dsss_spreading_bb_sptr_swigregister = _lpwan_swig.dsss_spreading_bb_sptr_swigregister
dsss_spreading_bb_sptr_swigregister(dsss_spreading_bb_sptr)


dsss_spreading_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_spreading_bb = dsss_spreading_bb.make;

class dsss_deinterleaver_ff(object):
    """
    Deinterleaver block for LECIM DSSS Phy.

    Deinterleaves the tagged input stream with soft decision floats. The length has to be 256, 384, or 512. Std. 23.2.4

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_deinterleaver_ff.

    Args:
        len_tag : length tag key
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len_tag):
        """
        make(std::string len_tag) -> dsss_deinterleaver_ff_sptr

        Deinterleaver block for LECIM DSSS Phy.

        Deinterleaves the tagged input stream with soft decision floats. The length has to be 256, 384, or 512. Std. 23.2.4

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_deinterleaver_ff.

        Args:
            len_tag : length tag key
        """
        return _lpwan_swig.dsss_deinterleaver_ff_make(len_tag)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_deinterleaver_ff
    __del__ = lambda self: None
dsss_deinterleaver_ff_swigregister = _lpwan_swig.dsss_deinterleaver_ff_swigregister
dsss_deinterleaver_ff_swigregister(dsss_deinterleaver_ff)

def dsss_deinterleaver_ff_make(len_tag):
    """
    dsss_deinterleaver_ff_make(std::string len_tag) -> dsss_deinterleaver_ff_sptr

    Deinterleaver block for LECIM DSSS Phy.

    Deinterleaves the tagged input stream with soft decision floats. The length has to be 256, 384, or 512. Std. 23.2.4

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_deinterleaver_ff.

    Args:
        len_tag : length tag key
    """
    return _lpwan_swig.dsss_deinterleaver_ff_make(len_tag)

class dsss_deinterleaver_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_deinterleaver_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_deinterleaver_ff)> self) -> dsss_deinterleaver_ff_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_deinterleaver_ff)> self, dsss_deinterleaver_ff p) -> dsss_deinterleaver_ff_sptr
        """
        this = _lpwan_swig.new_dsss_deinterleaver_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_deinterleaver_ff_sptr self) -> dsss_deinterleaver_ff"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_deinterleaver_ff_sptr
    __del__ = lambda self: None

    def make(self, len_tag):
        """
        make(dsss_deinterleaver_ff_sptr self, std::string len_tag) -> dsss_deinterleaver_ff_sptr

        Deinterleaver block for LECIM DSSS Phy.

        Deinterleaves the tagged input stream with soft decision floats. The length has to be 256, 384, or 512. Std. 23.2.4

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_deinterleaver_ff.

        Args:
            len_tag : length tag key
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_make(self, len_tag)


    def history(self):
        """history(dsss_deinterleaver_ff_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_deinterleaver_ff_sptr self, int which, int delay)
        declare_sample_delay(dsss_deinterleaver_ff_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_deinterleaver_ff_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_deinterleaver_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_deinterleaver_ff_sptr self) -> double"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_relative_rate(self)


    def start(self):
        """start(dsss_deinterleaver_ff_sptr self) -> bool"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_start(self)


    def stop(self):
        """stop(dsss_deinterleaver_ff_sptr self) -> bool"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_deinterleaver_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_deinterleaver_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_deinterleaver_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_deinterleaver_ff_sptr self, int m)"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_deinterleaver_ff_sptr self)"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_deinterleaver_ff_sptr self) -> bool"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_deinterleaver_ff_sptr self, int m)"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_deinterleaver_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_deinterleaver_ff_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_deinterleaver_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_deinterleaver_ff_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_deinterleaver_ff_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_deinterleaver_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_deinterleaver_ff_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_deinterleaver_ff_sptr self, int which) -> float
        pc_input_buffers_full(dsss_deinterleaver_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_deinterleaver_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_deinterleaver_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_deinterleaver_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_deinterleaver_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_deinterleaver_ff_sptr self, int which) -> float
        pc_output_buffers_full(dsss_deinterleaver_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_deinterleaver_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_deinterleaver_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_deinterleaver_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_deinterleaver_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_deinterleaver_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_deinterleaver_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_deinterleaver_ff_sptr self)"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_deinterleaver_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_deinterleaver_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_deinterleaver_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_deinterleaver_ff_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_deinterleaver_ff_sptr self) -> std::string"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_deinterleaver_ff_sptr self) -> std::string"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_deinterleaver_ff_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_deinterleaver_ff_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_deinterleaver_ff_sptr self) -> long"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_deinterleaver_ff_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_deinterleaver_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_deinterleaver_ff_sptr self) -> std::string"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_deinterleaver_ff_sptr self, std::string name)"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_deinterleaver_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_deinterleaver_ff_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_deinterleaver_ff_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_deinterleaver_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_deinterleaver_ff_sptr_message_subscribers(self, which_port)

dsss_deinterleaver_ff_sptr_swigregister = _lpwan_swig.dsss_deinterleaver_ff_sptr_swigregister
dsss_deinterleaver_ff_sptr_swigregister(dsss_deinterleaver_ff_sptr)


dsss_deinterleaver_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_deinterleaver_ff = dsss_deinterleaver_ff.make;

class dsss_diff_decoding_ff(object):
    """
    Differential Decoding for LECIM DSSS Phy.

    This tagged stream block performs differential decoding described in Std 23.2.5.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_diff_decoding_ff.

    Args:
        len_tag : length tag key
        phase_ref : additional phase reference symbol from preamble is in input stream
        shr_len : length of the SHR, not needed if phase_ref == false
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len_tag, phase_ref, shr_len):
        """
        make(std::string len_tag, bool phase_ref, int shr_len) -> dsss_diff_decoding_ff_sptr

        Differential Decoding for LECIM DSSS Phy.

        This tagged stream block performs differential decoding described in Std 23.2.5.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_diff_decoding_ff.

        Args:
            len_tag : length tag key
            phase_ref : additional phase reference symbol from preamble is in input stream
            shr_len : length of the SHR, not needed if phase_ref == false
        """
        return _lpwan_swig.dsss_diff_decoding_ff_make(len_tag, phase_ref, shr_len)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_diff_decoding_ff
    __del__ = lambda self: None
dsss_diff_decoding_ff_swigregister = _lpwan_swig.dsss_diff_decoding_ff_swigregister
dsss_diff_decoding_ff_swigregister(dsss_diff_decoding_ff)

def dsss_diff_decoding_ff_make(len_tag, phase_ref, shr_len):
    """
    dsss_diff_decoding_ff_make(std::string len_tag, bool phase_ref, int shr_len) -> dsss_diff_decoding_ff_sptr

    Differential Decoding for LECIM DSSS Phy.

    This tagged stream block performs differential decoding described in Std 23.2.5.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_diff_decoding_ff.

    Args:
        len_tag : length tag key
        phase_ref : additional phase reference symbol from preamble is in input stream
        shr_len : length of the SHR, not needed if phase_ref == false
    """
    return _lpwan_swig.dsss_diff_decoding_ff_make(len_tag, phase_ref, shr_len)

class dsss_diff_decoding_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_diff_decoding_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_diff_decoding_ff)> self) -> dsss_diff_decoding_ff_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_diff_decoding_ff)> self, dsss_diff_decoding_ff p) -> dsss_diff_decoding_ff_sptr
        """
        this = _lpwan_swig.new_dsss_diff_decoding_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_diff_decoding_ff_sptr self) -> dsss_diff_decoding_ff"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_diff_decoding_ff_sptr
    __del__ = lambda self: None

    def make(self, len_tag, phase_ref, shr_len):
        """
        make(dsss_diff_decoding_ff_sptr self, std::string len_tag, bool phase_ref, int shr_len) -> dsss_diff_decoding_ff_sptr

        Differential Decoding for LECIM DSSS Phy.

        This tagged stream block performs differential decoding described in Std 23.2.5.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_diff_decoding_ff.

        Args:
            len_tag : length tag key
            phase_ref : additional phase reference symbol from preamble is in input stream
            shr_len : length of the SHR, not needed if phase_ref == false
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_make(self, len_tag, phase_ref, shr_len)


    def history(self):
        """history(dsss_diff_decoding_ff_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_diff_decoding_ff_sptr self, int which, int delay)
        declare_sample_delay(dsss_diff_decoding_ff_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_diff_decoding_ff_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_diff_decoding_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_diff_decoding_ff_sptr self) -> double"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_relative_rate(self)


    def start(self):
        """start(dsss_diff_decoding_ff_sptr self) -> bool"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_start(self)


    def stop(self):
        """stop(dsss_diff_decoding_ff_sptr self) -> bool"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_diff_decoding_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_diff_decoding_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_diff_decoding_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_diff_decoding_ff_sptr self, int m)"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_diff_decoding_ff_sptr self)"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_diff_decoding_ff_sptr self) -> bool"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_diff_decoding_ff_sptr self, int m)"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_diff_decoding_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_diff_decoding_ff_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_diff_decoding_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_diff_decoding_ff_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_diff_decoding_ff_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_diff_decoding_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_diff_decoding_ff_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_diff_decoding_ff_sptr self, int which) -> float
        pc_input_buffers_full(dsss_diff_decoding_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_diff_decoding_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_diff_decoding_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_diff_decoding_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_diff_decoding_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_diff_decoding_ff_sptr self, int which) -> float
        pc_output_buffers_full(dsss_diff_decoding_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_diff_decoding_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_diff_decoding_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_diff_decoding_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_diff_decoding_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_diff_decoding_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_diff_decoding_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_diff_decoding_ff_sptr self)"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_diff_decoding_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_diff_decoding_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_diff_decoding_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_diff_decoding_ff_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_diff_decoding_ff_sptr self) -> std::string"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_diff_decoding_ff_sptr self) -> std::string"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_diff_decoding_ff_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_diff_decoding_ff_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_diff_decoding_ff_sptr self) -> long"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_diff_decoding_ff_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_diff_decoding_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_diff_decoding_ff_sptr self) -> std::string"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_diff_decoding_ff_sptr self, std::string name)"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_diff_decoding_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_diff_decoding_ff_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_diff_decoding_ff_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_diff_decoding_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_diff_decoding_ff_sptr_message_subscribers(self, which_port)

dsss_diff_decoding_ff_sptr_swigregister = _lpwan_swig.dsss_diff_decoding_ff_sptr_swigregister
dsss_diff_decoding_ff_sptr_swigregister(dsss_diff_decoding_ff_sptr)


dsss_diff_decoding_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_diff_decoding_ff = dsss_diff_decoding_ff.make;

class dsss_despread_simple_cc(object):
    """
    Despreads succeeding LECIM DSSS packets.

    This tagged stream block despreads timesynced succeeding spreaded payload data. Useful for simulations.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_despread_simple_cc.

    !

    Args:
        len_tag : length tag key
        spread_factor : gold code spreading factor
        seed : seed of the cold gode generator for the data payload
        reset_per_symbol : 
        ovsf_code_index : ovsf code index [0, 2^ovsf_log_sf-1]
        ovsf_log2_spread_factor : ovsf spreading factor [0, 8]
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log2_spread_factor):
        """
        make(std::string len_tag, int spread_factor, int seed, bool reset_per_symbol, int ovsf_code_index, int ovsf_log2_spread_factor) -> dsss_despread_simple_cc_sptr

        Despreads succeeding LECIM DSSS packets.

        This tagged stream block despreads timesynced succeeding spreaded payload data. Useful for simulations.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_despread_simple_cc.

        !

        Args:
            len_tag : length tag key
            spread_factor : gold code spreading factor
            seed : seed of the cold gode generator for the data payload
            reset_per_symbol : 
            ovsf_code_index : ovsf code index [0, 2^ovsf_log_sf-1]
            ovsf_log2_spread_factor : ovsf spreading factor [0, 8]
        """
        return _lpwan_swig.dsss_despread_simple_cc_make(len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log2_spread_factor)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_despread_simple_cc
    __del__ = lambda self: None
dsss_despread_simple_cc_swigregister = _lpwan_swig.dsss_despread_simple_cc_swigregister
dsss_despread_simple_cc_swigregister(dsss_despread_simple_cc)

def dsss_despread_simple_cc_make(len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log2_spread_factor):
    """
    dsss_despread_simple_cc_make(std::string len_tag, int spread_factor, int seed, bool reset_per_symbol, int ovsf_code_index, int ovsf_log2_spread_factor) -> dsss_despread_simple_cc_sptr

    Despreads succeeding LECIM DSSS packets.

    This tagged stream block despreads timesynced succeeding spreaded payload data. Useful for simulations.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_despread_simple_cc.

    !

    Args:
        len_tag : length tag key
        spread_factor : gold code spreading factor
        seed : seed of the cold gode generator for the data payload
        reset_per_symbol : 
        ovsf_code_index : ovsf code index [0, 2^ovsf_log_sf-1]
        ovsf_log2_spread_factor : ovsf spreading factor [0, 8]
    """
    return _lpwan_swig.dsss_despread_simple_cc_make(len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log2_spread_factor)

class dsss_despread_simple_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_despread_simple_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_despread_simple_cc)> self) -> dsss_despread_simple_cc_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_despread_simple_cc)> self, dsss_despread_simple_cc p) -> dsss_despread_simple_cc_sptr
        """
        this = _lpwan_swig.new_dsss_despread_simple_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_despread_simple_cc_sptr self) -> dsss_despread_simple_cc"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_despread_simple_cc_sptr
    __del__ = lambda self: None

    def make(self, len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log2_spread_factor):
        """
        make(dsss_despread_simple_cc_sptr self, std::string len_tag, int spread_factor, int seed, bool reset_per_symbol, int ovsf_code_index, int ovsf_log2_spread_factor) -> dsss_despread_simple_cc_sptr

        Despreads succeeding LECIM DSSS packets.

        This tagged stream block despreads timesynced succeeding spreaded payload data. Useful for simulations.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_despread_simple_cc.

        !

        Args:
            len_tag : length tag key
            spread_factor : gold code spreading factor
            seed : seed of the cold gode generator for the data payload
            reset_per_symbol : 
            ovsf_code_index : ovsf code index [0, 2^ovsf_log_sf-1]
            ovsf_log2_spread_factor : ovsf spreading factor [0, 8]
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_make(self, len_tag, spread_factor, seed, reset_per_symbol, ovsf_code_index, ovsf_log2_spread_factor)


    def history(self):
        """history(dsss_despread_simple_cc_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_despread_simple_cc_sptr self, int which, int delay)
        declare_sample_delay(dsss_despread_simple_cc_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_despread_simple_cc_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_despread_simple_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_despread_simple_cc_sptr self) -> double"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_relative_rate(self)


    def start(self):
        """start(dsss_despread_simple_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_start(self)


    def stop(self):
        """stop(dsss_despread_simple_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_despread_simple_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_despread_simple_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_despread_simple_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_despread_simple_cc_sptr self, int m)"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_despread_simple_cc_sptr self)"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_despread_simple_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_despread_simple_cc_sptr self, int m)"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_despread_simple_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_despread_simple_cc_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_despread_simple_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_despread_simple_cc_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_despread_simple_cc_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_despread_simple_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_despread_simple_cc_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_despread_simple_cc_sptr self, int which) -> float
        pc_input_buffers_full(dsss_despread_simple_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_despread_simple_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_despread_simple_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_despread_simple_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_despread_simple_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_despread_simple_cc_sptr self, int which) -> float
        pc_output_buffers_full(dsss_despread_simple_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_despread_simple_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_despread_simple_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_despread_simple_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_despread_simple_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_despread_simple_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_despread_simple_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_despread_simple_cc_sptr self)"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_despread_simple_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_despread_simple_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_despread_simple_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_despread_simple_cc_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_despread_simple_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_despread_simple_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_despread_simple_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_despread_simple_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_despread_simple_cc_sptr self) -> long"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_despread_simple_cc_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_despread_simple_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_despread_simple_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_despread_simple_cc_sptr self, std::string name)"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_despread_simple_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_despread_simple_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_despread_simple_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_despread_simple_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_despread_simple_cc_sptr_message_subscribers(self, which_port)

dsss_despread_simple_cc_sptr_swigregister = _lpwan_swig.dsss_despread_simple_cc_sptr_swigregister
dsss_despread_simple_cc_sptr_swigregister(dsss_despread_simple_cc_sptr)


dsss_despread_simple_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_despread_simple_cc = dsss_despread_simple_cc.make;

class dsss_preamble_demod_cc(object):
    """
    Preamble Demodulation/Correlation.

    out[n] = Sum_N_i(in(n+i*sf*sps) * preamble(i))

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_preamble_demod_cc.

    Args:
        sf : spreading factor of shr
        sps : samples per symbol
        preamble_length : length of the preamble in bits
        sfd_present : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sf, sps, preamble_length, sfd_present):
        """
        make(int sf, int sps, int preamble_length, bool sfd_present) -> dsss_preamble_demod_cc_sptr

        Preamble Demodulation/Correlation.

        out[n] = Sum_N_i(in(n+i*sf*sps) * preamble(i))

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_preamble_demod_cc.

        Args:
            sf : spreading factor of shr
            sps : samples per symbol
            preamble_length : length of the preamble in bits
            sfd_present : 
        """
        return _lpwan_swig.dsss_preamble_demod_cc_make(sf, sps, preamble_length, sfd_present)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_preamble_demod_cc
    __del__ = lambda self: None
dsss_preamble_demod_cc_swigregister = _lpwan_swig.dsss_preamble_demod_cc_swigregister
dsss_preamble_demod_cc_swigregister(dsss_preamble_demod_cc)

def dsss_preamble_demod_cc_make(sf, sps, preamble_length, sfd_present):
    """
    dsss_preamble_demod_cc_make(int sf, int sps, int preamble_length, bool sfd_present) -> dsss_preamble_demod_cc_sptr

    Preamble Demodulation/Correlation.

    out[n] = Sum_N_i(in(n+i*sf*sps) * preamble(i))

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_preamble_demod_cc.

    Args:
        sf : spreading factor of shr
        sps : samples per symbol
        preamble_length : length of the preamble in bits
        sfd_present : 
    """
    return _lpwan_swig.dsss_preamble_demod_cc_make(sf, sps, preamble_length, sfd_present)

class dsss_preamble_demod_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_preamble_demod_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_preamble_demod_cc)> self) -> dsss_preamble_demod_cc_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_preamble_demod_cc)> self, dsss_preamble_demod_cc p) -> dsss_preamble_demod_cc_sptr
        """
        this = _lpwan_swig.new_dsss_preamble_demod_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_preamble_demod_cc_sptr self) -> dsss_preamble_demod_cc"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_preamble_demod_cc_sptr
    __del__ = lambda self: None

    def make(self, sf, sps, preamble_length, sfd_present):
        """
        make(dsss_preamble_demod_cc_sptr self, int sf, int sps, int preamble_length, bool sfd_present) -> dsss_preamble_demod_cc_sptr

        Preamble Demodulation/Correlation.

        out[n] = Sum_N_i(in(n+i*sf*sps) * preamble(i))

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_preamble_demod_cc.

        Args:
            sf : spreading factor of shr
            sps : samples per symbol
            preamble_length : length of the preamble in bits
            sfd_present : 
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_make(self, sf, sps, preamble_length, sfd_present)


    def history(self):
        """history(dsss_preamble_demod_cc_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_preamble_demod_cc_sptr self, int which, int delay)
        declare_sample_delay(dsss_preamble_demod_cc_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_preamble_demod_cc_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_preamble_demod_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_preamble_demod_cc_sptr self) -> double"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_relative_rate(self)


    def start(self):
        """start(dsss_preamble_demod_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_start(self)


    def stop(self):
        """stop(dsss_preamble_demod_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_preamble_demod_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_preamble_demod_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_preamble_demod_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_preamble_demod_cc_sptr self, int m)"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_preamble_demod_cc_sptr self)"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_preamble_demod_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_preamble_demod_cc_sptr self, int m)"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_preamble_demod_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_preamble_demod_cc_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_preamble_demod_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_preamble_demod_cc_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_preamble_demod_cc_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_preamble_demod_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_preamble_demod_cc_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_preamble_demod_cc_sptr self, int which) -> float
        pc_input_buffers_full(dsss_preamble_demod_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_preamble_demod_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_preamble_demod_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_preamble_demod_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_preamble_demod_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_preamble_demod_cc_sptr self, int which) -> float
        pc_output_buffers_full(dsss_preamble_demod_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_preamble_demod_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_preamble_demod_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_preamble_demod_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_preamble_demod_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_preamble_demod_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_preamble_demod_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_preamble_demod_cc_sptr self)"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_preamble_demod_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_preamble_demod_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_preamble_demod_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_preamble_demod_cc_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_preamble_demod_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_preamble_demod_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_preamble_demod_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_preamble_demod_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_preamble_demod_cc_sptr self) -> long"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_preamble_demod_cc_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_preamble_demod_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_preamble_demod_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_preamble_demod_cc_sptr self, std::string name)"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_preamble_demod_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_preamble_demod_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_preamble_demod_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_preamble_demod_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_preamble_demod_cc_sptr_message_subscribers(self, which_port)

dsss_preamble_demod_cc_sptr_swigregister = _lpwan_swig.dsss_preamble_demod_cc_sptr_swigregister
dsss_preamble_demod_cc_sptr_swigregister(dsss_preamble_demod_cc_sptr)


dsss_preamble_demod_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_preamble_demod_cc = dsss_preamble_demod_cc.make;

class conj_multiply_delay_ccc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::conj_multiply_delay_ccc.

    To avoid accidental use of raw pointers, lpwan::conj_multiply_delay_ccc's constructor is in a private implementation class. lpwan::conj_multiply_delay_ccc::make is the public interface for creating new instances.

    Args:
        delay : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(delay):
        """
        make(int delay) -> conj_multiply_delay_ccc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::conj_multiply_delay_ccc.

        To avoid accidental use of raw pointers, lpwan::conj_multiply_delay_ccc's constructor is in a private implementation class. lpwan::conj_multiply_delay_ccc::make is the public interface for creating new instances.

        Args:
            delay : 
        """
        return _lpwan_swig.conj_multiply_delay_ccc_make(delay)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_conj_multiply_delay_ccc
    __del__ = lambda self: None
conj_multiply_delay_ccc_swigregister = _lpwan_swig.conj_multiply_delay_ccc_swigregister
conj_multiply_delay_ccc_swigregister(conj_multiply_delay_ccc)

def conj_multiply_delay_ccc_make(delay):
    """
    conj_multiply_delay_ccc_make(int delay) -> conj_multiply_delay_ccc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::conj_multiply_delay_ccc.

    To avoid accidental use of raw pointers, lpwan::conj_multiply_delay_ccc's constructor is in a private implementation class. lpwan::conj_multiply_delay_ccc::make is the public interface for creating new instances.

    Args:
        delay : 
    """
    return _lpwan_swig.conj_multiply_delay_ccc_make(delay)

class conj_multiply_delay_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::conj_multiply_delay_ccc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::conj_multiply_delay_ccc)> self) -> conj_multiply_delay_ccc_sptr
        __init__(boost::shared_ptr<(gr::lpwan::conj_multiply_delay_ccc)> self, conj_multiply_delay_ccc p) -> conj_multiply_delay_ccc_sptr
        """
        this = _lpwan_swig.new_conj_multiply_delay_ccc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(conj_multiply_delay_ccc_sptr self) -> conj_multiply_delay_ccc"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_conj_multiply_delay_ccc_sptr
    __del__ = lambda self: None

    def make(self, delay):
        """
        make(conj_multiply_delay_ccc_sptr self, int delay) -> conj_multiply_delay_ccc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::conj_multiply_delay_ccc.

        To avoid accidental use of raw pointers, lpwan::conj_multiply_delay_ccc's constructor is in a private implementation class. lpwan::conj_multiply_delay_ccc::make is the public interface for creating new instances.

        Args:
            delay : 
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_make(self, delay)


    def history(self):
        """history(conj_multiply_delay_ccc_sptr self) -> unsigned int"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(conj_multiply_delay_ccc_sptr self, int which, int delay)
        declare_sample_delay(conj_multiply_delay_ccc_sptr self, unsigned int delay)
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(conj_multiply_delay_ccc_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(conj_multiply_delay_ccc_sptr self) -> int"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(conj_multiply_delay_ccc_sptr self) -> double"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_relative_rate(self)


    def start(self):
        """start(conj_multiply_delay_ccc_sptr self) -> bool"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_start(self)


    def stop(self):
        """stop(conj_multiply_delay_ccc_sptr self) -> bool"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(conj_multiply_delay_ccc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(conj_multiply_delay_ccc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(conj_multiply_delay_ccc_sptr self) -> int"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(conj_multiply_delay_ccc_sptr self, int m)"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(conj_multiply_delay_ccc_sptr self)"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(conj_multiply_delay_ccc_sptr self) -> bool"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(conj_multiply_delay_ccc_sptr self, int m)"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(conj_multiply_delay_ccc_sptr self) -> int"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(conj_multiply_delay_ccc_sptr self, int i) -> long"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(conj_multiply_delay_ccc_sptr self, long max_output_buffer)
        set_max_output_buffer(conj_multiply_delay_ccc_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(conj_multiply_delay_ccc_sptr self, int i) -> long"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(conj_multiply_delay_ccc_sptr self, long min_output_buffer)
        set_min_output_buffer(conj_multiply_delay_ccc_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(conj_multiply_delay_ccc_sptr self, int which) -> float
        pc_input_buffers_full(conj_multiply_delay_ccc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(conj_multiply_delay_ccc_sptr self, int which) -> float
        pc_input_buffers_full_avg(conj_multiply_delay_ccc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(conj_multiply_delay_ccc_sptr self, int which) -> float
        pc_input_buffers_full_var(conj_multiply_delay_ccc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(conj_multiply_delay_ccc_sptr self, int which) -> float
        pc_output_buffers_full(conj_multiply_delay_ccc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(conj_multiply_delay_ccc_sptr self, int which) -> float
        pc_output_buffers_full_avg(conj_multiply_delay_ccc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(conj_multiply_delay_ccc_sptr self, int which) -> float
        pc_output_buffers_full_var(conj_multiply_delay_ccc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(conj_multiply_delay_ccc_sptr self) -> float"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(conj_multiply_delay_ccc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(conj_multiply_delay_ccc_sptr self)"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(conj_multiply_delay_ccc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(conj_multiply_delay_ccc_sptr self) -> int"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(conj_multiply_delay_ccc_sptr self) -> int"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(conj_multiply_delay_ccc_sptr self, int priority) -> int"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(conj_multiply_delay_ccc_sptr self) -> std::string"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(conj_multiply_delay_ccc_sptr self) -> std::string"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(conj_multiply_delay_ccc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(conj_multiply_delay_ccc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(conj_multiply_delay_ccc_sptr self) -> long"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(conj_multiply_delay_ccc_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(conj_multiply_delay_ccc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(conj_multiply_delay_ccc_sptr self) -> std::string"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(conj_multiply_delay_ccc_sptr self, std::string name)"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(conj_multiply_delay_ccc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(conj_multiply_delay_ccc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(conj_multiply_delay_ccc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(conj_multiply_delay_ccc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.conj_multiply_delay_ccc_sptr_message_subscribers(self, which_port)

conj_multiply_delay_ccc_sptr_swigregister = _lpwan_swig.conj_multiply_delay_ccc_sptr_swigregister
conj_multiply_delay_ccc_sptr_swigregister(conj_multiply_delay_ccc_sptr)


conj_multiply_delay_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
conj_multiply_delay_ccc = conj_multiply_delay_ccc.make;

class dsss_preamble_detector_cc(object):
    """
    Detects the preamble.

    This block is basically a peak detector. It tags the raw rx filtered input data with the detected peak positions (key: "sop"), an estimation for the frequency offset and an estimation of the SNR. It works together with the despreading block.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_preamble_detector_cc.

    Args:
        freqs : vector with the frequency hypothesis
        shr_len : length of the shr in bits
        sf : preamble spreading factor
        sps : samples per symbol
        chiprate : absolute chiprate
        filter_taps : filter taps of the Matched Filter, needed for SNR estimation
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(freqs, shr_len, sf, sps, chiprate, filter_taps):
        """
        make(pmt_vector_float freqs, int shr_len, int sf, int sps, int chiprate, pmt_vector_float filter_taps) -> dsss_preamble_detector_cc_sptr

        Detects the preamble.

        This block is basically a peak detector. It tags the raw rx filtered input data with the detected peak positions (key: "sop"), an estimation for the frequency offset and an estimation of the SNR. It works together with the despreading block.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_preamble_detector_cc.

        Args:
            freqs : vector with the frequency hypothesis
            shr_len : length of the shr in bits
            sf : preamble spreading factor
            sps : samples per symbol
            chiprate : absolute chiprate
            filter_taps : filter taps of the Matched Filter, needed for SNR estimation
        """
        return _lpwan_swig.dsss_preamble_detector_cc_make(freqs, shr_len, sf, sps, chiprate, filter_taps)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_preamble_detector_cc
    __del__ = lambda self: None
dsss_preamble_detector_cc_swigregister = _lpwan_swig.dsss_preamble_detector_cc_swigregister
dsss_preamble_detector_cc_swigregister(dsss_preamble_detector_cc)

def dsss_preamble_detector_cc_make(freqs, shr_len, sf, sps, chiprate, filter_taps):
    """
    dsss_preamble_detector_cc_make(pmt_vector_float freqs, int shr_len, int sf, int sps, int chiprate, pmt_vector_float filter_taps) -> dsss_preamble_detector_cc_sptr

    Detects the preamble.

    This block is basically a peak detector. It tags the raw rx filtered input data with the detected peak positions (key: "sop"), an estimation for the frequency offset and an estimation of the SNR. It works together with the despreading block.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_preamble_detector_cc.

    Args:
        freqs : vector with the frequency hypothesis
        shr_len : length of the shr in bits
        sf : preamble spreading factor
        sps : samples per symbol
        chiprate : absolute chiprate
        filter_taps : filter taps of the Matched Filter, needed for SNR estimation
    """
    return _lpwan_swig.dsss_preamble_detector_cc_make(freqs, shr_len, sf, sps, chiprate, filter_taps)

class dsss_preamble_detector_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_preamble_detector_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_preamble_detector_cc)> self) -> dsss_preamble_detector_cc_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_preamble_detector_cc)> self, dsss_preamble_detector_cc p) -> dsss_preamble_detector_cc_sptr
        """
        this = _lpwan_swig.new_dsss_preamble_detector_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_preamble_detector_cc_sptr self) -> dsss_preamble_detector_cc"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_preamble_detector_cc_sptr
    __del__ = lambda self: None

    def make(self, freqs, shr_len, sf, sps, chiprate, filter_taps):
        """
        make(dsss_preamble_detector_cc_sptr self, pmt_vector_float freqs, int shr_len, int sf, int sps, int chiprate, pmt_vector_float filter_taps) -> dsss_preamble_detector_cc_sptr

        Detects the preamble.

        This block is basically a peak detector. It tags the raw rx filtered input data with the detected peak positions (key: "sop"), an estimation for the frequency offset and an estimation of the SNR. It works together with the despreading block.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_preamble_detector_cc.

        Args:
            freqs : vector with the frequency hypothesis
            shr_len : length of the shr in bits
            sf : preamble spreading factor
            sps : samples per symbol
            chiprate : absolute chiprate
            filter_taps : filter taps of the Matched Filter, needed for SNR estimation
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_make(self, freqs, shr_len, sf, sps, chiprate, filter_taps)


    def history(self):
        """history(dsss_preamble_detector_cc_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_preamble_detector_cc_sptr self, int which, int delay)
        declare_sample_delay(dsss_preamble_detector_cc_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_preamble_detector_cc_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_preamble_detector_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_preamble_detector_cc_sptr self) -> double"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_relative_rate(self)


    def start(self):
        """start(dsss_preamble_detector_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_start(self)


    def stop(self):
        """stop(dsss_preamble_detector_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_preamble_detector_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_preamble_detector_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_preamble_detector_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_preamble_detector_cc_sptr self, int m)"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_preamble_detector_cc_sptr self)"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_preamble_detector_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_preamble_detector_cc_sptr self, int m)"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_preamble_detector_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_preamble_detector_cc_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_preamble_detector_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_preamble_detector_cc_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_preamble_detector_cc_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_preamble_detector_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_preamble_detector_cc_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_preamble_detector_cc_sptr self, int which) -> float
        pc_input_buffers_full(dsss_preamble_detector_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_preamble_detector_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_preamble_detector_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_preamble_detector_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_preamble_detector_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_preamble_detector_cc_sptr self, int which) -> float
        pc_output_buffers_full(dsss_preamble_detector_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_preamble_detector_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_preamble_detector_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_preamble_detector_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_preamble_detector_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_preamble_detector_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_preamble_detector_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_preamble_detector_cc_sptr self)"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_preamble_detector_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_preamble_detector_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_preamble_detector_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_preamble_detector_cc_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_preamble_detector_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_preamble_detector_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_preamble_detector_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_preamble_detector_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_preamble_detector_cc_sptr self) -> long"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_preamble_detector_cc_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_preamble_detector_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_preamble_detector_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_preamble_detector_cc_sptr self, std::string name)"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_preamble_detector_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_preamble_detector_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_preamble_detector_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_preamble_detector_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_preamble_detector_cc_sptr_message_subscribers(self, which_port)

dsss_preamble_detector_cc_sptr_swigregister = _lpwan_swig.dsss_preamble_detector_cc_sptr_swigregister
dsss_preamble_detector_cc_sptr_swigregister(dsss_preamble_detector_cc_sptr)


dsss_preamble_detector_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_preamble_detector_cc = dsss_preamble_detector_cc.make;

class dsss_despread_cc(object):
    """
    Despreading of already timesynced LECIM DSSS packets.

    This block despreads packets marked with a stream tag in the input stream. The tag has to be on the first chip of the payload, with the tag key "sop" and an estimation of the frequency offset as float value. It is possible to despread overlapping packets.

    The output is a tagged stream with one despreaded payload packet per tagged block.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_despread_cc.

    Args:
        sf : gold code spreading factor
        seed : seed of the cold gode generator for the data payload
        preamble_seed : seed of the cold gode generator for the preamble, assumed reset_per_symbol = true
        ovsf_code_index : ovsf code index [0, 2^ovsf_log_sf-1]
        ovsf_log_sf : ovsf spreading factor [0, 8]
        sps : samples per symbol, interpolation factor
        psdu_len : length of the psdu payload (16, 24, 32)
        modulation : OQPSK or BPSK
        chiprate : absolute chiprate, for frequency synchronisation
        reset_per_symbol : reset gold code after each symbol / after sf chips
        dll_active : true if the dll should be used
        dll_delta : sample delay of early late to prompt
        dll_gain : loop gain of dll
        dll_error_reset : single gain multiplier after sample error detection
        dll_cmp : cmp value for dll
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sf, seed, preamble_seed, ovsf_code_index, ovsf_log_sf, sps, psdu_len, modulation, chiprate, reset_per_symbol, dll_active, dll_delta, dll_gain, dll_error_reset, dll_cmp):
        """
        make(int sf, int seed, int preamble_seed, int ovsf_code_index, int ovsf_log_sf, int sps, int psdu_len, int modulation, int chiprate, bool reset_per_symbol, bool dll_active, int dll_delta, float dll_gain, float dll_error_reset, float dll_cmp) -> dsss_despread_cc_sptr

        Despreading of already timesynced LECIM DSSS packets.

        This block despreads packets marked with a stream tag in the input stream. The tag has to be on the first chip of the payload, with the tag key "sop" and an estimation of the frequency offset as float value. It is possible to despread overlapping packets.

        The output is a tagged stream with one despreaded payload packet per tagged block.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_despread_cc.

        Args:
            sf : gold code spreading factor
            seed : seed of the cold gode generator for the data payload
            preamble_seed : seed of the cold gode generator for the preamble, assumed reset_per_symbol = true
            ovsf_code_index : ovsf code index [0, 2^ovsf_log_sf-1]
            ovsf_log_sf : ovsf spreading factor [0, 8]
            sps : samples per symbol, interpolation factor
            psdu_len : length of the psdu payload (16, 24, 32)
            modulation : OQPSK or BPSK
            chiprate : absolute chiprate, for frequency synchronisation
            reset_per_symbol : reset gold code after each symbol / after sf chips
            dll_active : true if the dll should be used
            dll_delta : sample delay of early late to prompt
            dll_gain : loop gain of dll
            dll_error_reset : single gain multiplier after sample error detection
            dll_cmp : cmp value for dll
        """
        return _lpwan_swig.dsss_despread_cc_make(sf, seed, preamble_seed, ovsf_code_index, ovsf_log_sf, sps, psdu_len, modulation, chiprate, reset_per_symbol, dll_active, dll_delta, dll_gain, dll_error_reset, dll_cmp)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_despread_cc
    __del__ = lambda self: None
dsss_despread_cc_swigregister = _lpwan_swig.dsss_despread_cc_swigregister
dsss_despread_cc_swigregister(dsss_despread_cc)

def dsss_despread_cc_make(sf, seed, preamble_seed, ovsf_code_index, ovsf_log_sf, sps, psdu_len, modulation, chiprate, reset_per_symbol, dll_active, dll_delta, dll_gain, dll_error_reset, dll_cmp):
    """
    dsss_despread_cc_make(int sf, int seed, int preamble_seed, int ovsf_code_index, int ovsf_log_sf, int sps, int psdu_len, int modulation, int chiprate, bool reset_per_symbol, bool dll_active, int dll_delta, float dll_gain, float dll_error_reset, float dll_cmp) -> dsss_despread_cc_sptr

    Despreading of already timesynced LECIM DSSS packets.

    This block despreads packets marked with a stream tag in the input stream. The tag has to be on the first chip of the payload, with the tag key "sop" and an estimation of the frequency offset as float value. It is possible to despread overlapping packets.

    The output is a tagged stream with one despreaded payload packet per tagged block.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_despread_cc.

    Args:
        sf : gold code spreading factor
        seed : seed of the cold gode generator for the data payload
        preamble_seed : seed of the cold gode generator for the preamble, assumed reset_per_symbol = true
        ovsf_code_index : ovsf code index [0, 2^ovsf_log_sf-1]
        ovsf_log_sf : ovsf spreading factor [0, 8]
        sps : samples per symbol, interpolation factor
        psdu_len : length of the psdu payload (16, 24, 32)
        modulation : OQPSK or BPSK
        chiprate : absolute chiprate, for frequency synchronisation
        reset_per_symbol : reset gold code after each symbol / after sf chips
        dll_active : true if the dll should be used
        dll_delta : sample delay of early late to prompt
        dll_gain : loop gain of dll
        dll_error_reset : single gain multiplier after sample error detection
        dll_cmp : cmp value for dll
    """
    return _lpwan_swig.dsss_despread_cc_make(sf, seed, preamble_seed, ovsf_code_index, ovsf_log_sf, sps, psdu_len, modulation, chiprate, reset_per_symbol, dll_active, dll_delta, dll_gain, dll_error_reset, dll_cmp)

class dsss_despread_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_despread_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_despread_cc)> self) -> dsss_despread_cc_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_despread_cc)> self, dsss_despread_cc p) -> dsss_despread_cc_sptr
        """
        this = _lpwan_swig.new_dsss_despread_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_despread_cc_sptr self) -> dsss_despread_cc"""
        return _lpwan_swig.dsss_despread_cc_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_despread_cc_sptr
    __del__ = lambda self: None

    def make(self, sf, seed, preamble_seed, ovsf_code_index, ovsf_log_sf, sps, psdu_len, modulation, chiprate, reset_per_symbol, dll_active, dll_delta, dll_gain, dll_error_reset, dll_cmp):
        """
        make(dsss_despread_cc_sptr self, int sf, int seed, int preamble_seed, int ovsf_code_index, int ovsf_log_sf, int sps, int psdu_len, int modulation, int chiprate, bool reset_per_symbol, bool dll_active, int dll_delta, float dll_gain, float dll_error_reset, float dll_cmp) -> dsss_despread_cc_sptr

        Despreading of already timesynced LECIM DSSS packets.

        This block despreads packets marked with a stream tag in the input stream. The tag has to be on the first chip of the payload, with the tag key "sop" and an estimation of the frequency offset as float value. It is possible to despread overlapping packets.

        The output is a tagged stream with one despreaded payload packet per tagged block.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_despread_cc.

        Args:
            sf : gold code spreading factor
            seed : seed of the cold gode generator for the data payload
            preamble_seed : seed of the cold gode generator for the preamble, assumed reset_per_symbol = true
            ovsf_code_index : ovsf code index [0, 2^ovsf_log_sf-1]
            ovsf_log_sf : ovsf spreading factor [0, 8]
            sps : samples per symbol, interpolation factor
            psdu_len : length of the psdu payload (16, 24, 32)
            modulation : OQPSK or BPSK
            chiprate : absolute chiprate, for frequency synchronisation
            reset_per_symbol : reset gold code after each symbol / after sf chips
            dll_active : true if the dll should be used
            dll_delta : sample delay of early late to prompt
            dll_gain : loop gain of dll
            dll_error_reset : single gain multiplier after sample error detection
            dll_cmp : cmp value for dll
        """
        return _lpwan_swig.dsss_despread_cc_sptr_make(self, sf, seed, preamble_seed, ovsf_code_index, ovsf_log_sf, sps, psdu_len, modulation, chiprate, reset_per_symbol, dll_active, dll_delta, dll_gain, dll_error_reset, dll_cmp)


    def history(self):
        """history(dsss_despread_cc_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_despread_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_despread_cc_sptr self, int which, int delay)
        declare_sample_delay(dsss_despread_cc_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_despread_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_despread_cc_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_despread_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_despread_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_despread_cc_sptr self) -> double"""
        return _lpwan_swig.dsss_despread_cc_sptr_relative_rate(self)


    def start(self):
        """start(dsss_despread_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_despread_cc_sptr_start(self)


    def stop(self):
        """stop(dsss_despread_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_despread_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_despread_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_despread_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_despread_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_despread_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_despread_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_despread_cc_sptr self, int m)"""
        return _lpwan_swig.dsss_despread_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_despread_cc_sptr self)"""
        return _lpwan_swig.dsss_despread_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_despread_cc_sptr self) -> bool"""
        return _lpwan_swig.dsss_despread_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_despread_cc_sptr self, int m)"""
        return _lpwan_swig.dsss_despread_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_despread_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_despread_cc_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_despread_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_despread_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_despread_cc_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_despread_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_despread_cc_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_despread_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_despread_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_despread_cc_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_despread_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_despread_cc_sptr self, int which) -> float
        pc_input_buffers_full(dsss_despread_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_despread_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_despread_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_despread_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_despread_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_despread_cc_sptr self, int which) -> float
        pc_output_buffers_full(dsss_despread_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_despread_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_despread_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_despread_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_despread_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_despread_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_despread_cc_sptr self) -> float"""
        return _lpwan_swig.dsss_despread_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_despread_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_despread_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_despread_cc_sptr self)"""
        return _lpwan_swig.dsss_despread_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_despread_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_despread_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_despread_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_despread_cc_sptr self) -> int"""
        return _lpwan_swig.dsss_despread_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_despread_cc_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_despread_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_despread_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_despread_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_despread_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_despread_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_despread_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_despread_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_despread_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_despread_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_despread_cc_sptr self) -> long"""
        return _lpwan_swig.dsss_despread_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_despread_cc_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_despread_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_despread_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_despread_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_despread_cc_sptr self) -> std::string"""
        return _lpwan_swig.dsss_despread_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_despread_cc_sptr self, std::string name)"""
        return _lpwan_swig.dsss_despread_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_despread_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_despread_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_despread_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_despread_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_despread_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_despread_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_despread_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_despread_cc_sptr_message_subscribers(self, which_port)

dsss_despread_cc_sptr_swigregister = _lpwan_swig.dsss_despread_cc_sptr_swigregister
dsss_despread_cc_sptr_swigregister(dsss_despread_cc_sptr)


dsss_despread_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_despread_cc = dsss_despread_cc.make;

class dsss_normalize_ff(object):
    """
    Normalizes one tagged stream block with length N.

    out = in / (Sum_N_x(abs(in[x])) / N)

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_normalize_ff.

    Args:
        len_tag : length tag key
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len_tag):
        """
        make(std::string len_tag) -> dsss_normalize_ff_sptr

        Normalizes one tagged stream block with length N.

        out = in / (Sum_N_x(abs(in[x])) / N)

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_normalize_ff.

        Args:
            len_tag : length tag key
        """
        return _lpwan_swig.dsss_normalize_ff_make(len_tag)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_normalize_ff
    __del__ = lambda self: None
dsss_normalize_ff_swigregister = _lpwan_swig.dsss_normalize_ff_swigregister
dsss_normalize_ff_swigregister(dsss_normalize_ff)

def dsss_normalize_ff_make(len_tag):
    """
    dsss_normalize_ff_make(std::string len_tag) -> dsss_normalize_ff_sptr

    Normalizes one tagged stream block with length N.

    out = in / (Sum_N_x(abs(in[x])) / N)

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_normalize_ff.

    Args:
        len_tag : length tag key
    """
    return _lpwan_swig.dsss_normalize_ff_make(len_tag)

class dsss_normalize_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_normalize_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_normalize_ff)> self) -> dsss_normalize_ff_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_normalize_ff)> self, dsss_normalize_ff p) -> dsss_normalize_ff_sptr
        """
        this = _lpwan_swig.new_dsss_normalize_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_normalize_ff_sptr self) -> dsss_normalize_ff"""
        return _lpwan_swig.dsss_normalize_ff_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_normalize_ff_sptr
    __del__ = lambda self: None

    def make(self, len_tag):
        """
        make(dsss_normalize_ff_sptr self, std::string len_tag) -> dsss_normalize_ff_sptr

        Normalizes one tagged stream block with length N.

        out = in / (Sum_N_x(abs(in[x])) / N)

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_normalize_ff.

        Args:
            len_tag : length tag key
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_make(self, len_tag)


    def history(self):
        """history(dsss_normalize_ff_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_normalize_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_normalize_ff_sptr self, int which, int delay)
        declare_sample_delay(dsss_normalize_ff_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_normalize_ff_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_normalize_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_normalize_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_normalize_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_normalize_ff_sptr self) -> double"""
        return _lpwan_swig.dsss_normalize_ff_sptr_relative_rate(self)


    def start(self):
        """start(dsss_normalize_ff_sptr self) -> bool"""
        return _lpwan_swig.dsss_normalize_ff_sptr_start(self)


    def stop(self):
        """stop(dsss_normalize_ff_sptr self) -> bool"""
        return _lpwan_swig.dsss_normalize_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_normalize_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_normalize_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_normalize_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_normalize_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_normalize_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_normalize_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_normalize_ff_sptr self, int m)"""
        return _lpwan_swig.dsss_normalize_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_normalize_ff_sptr self)"""
        return _lpwan_swig.dsss_normalize_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_normalize_ff_sptr self) -> bool"""
        return _lpwan_swig.dsss_normalize_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_normalize_ff_sptr self, int m)"""
        return _lpwan_swig.dsss_normalize_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_normalize_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_normalize_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_normalize_ff_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_normalize_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_normalize_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_normalize_ff_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_normalize_ff_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_normalize_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_normalize_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_normalize_ff_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_normalize_ff_sptr self, int which) -> float
        pc_input_buffers_full(dsss_normalize_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_normalize_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_normalize_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_normalize_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_normalize_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_normalize_ff_sptr self, int which) -> float
        pc_output_buffers_full(dsss_normalize_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_normalize_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_normalize_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_normalize_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_normalize_ff_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_normalize_ff_sptr self) -> float"""
        return _lpwan_swig.dsss_normalize_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_normalize_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_normalize_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_normalize_ff_sptr self)"""
        return _lpwan_swig.dsss_normalize_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_normalize_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_normalize_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_normalize_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_normalize_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_normalize_ff_sptr self) -> int"""
        return _lpwan_swig.dsss_normalize_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_normalize_ff_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_normalize_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_normalize_ff_sptr self) -> std::string"""
        return _lpwan_swig.dsss_normalize_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_normalize_ff_sptr self) -> std::string"""
        return _lpwan_swig.dsss_normalize_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_normalize_ff_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_normalize_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_normalize_ff_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_normalize_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_normalize_ff_sptr self) -> long"""
        return _lpwan_swig.dsss_normalize_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_normalize_ff_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_normalize_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_normalize_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_normalize_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_normalize_ff_sptr self) -> std::string"""
        return _lpwan_swig.dsss_normalize_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_normalize_ff_sptr self, std::string name)"""
        return _lpwan_swig.dsss_normalize_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_normalize_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_normalize_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_normalize_ff_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_normalize_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_normalize_ff_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_normalize_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_normalize_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_normalize_ff_sptr_message_subscribers(self, which_port)

dsss_normalize_ff_sptr_swigregister = _lpwan_swig.dsss_normalize_ff_sptr_swigregister
dsss_normalize_ff_sptr_swigregister(dsss_normalize_ff_sptr)


dsss_normalize_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_normalize_ff = dsss_normalize_ff.make;

class dsss_snr_estimator(object):
    """
    Estimates the SNR of received packets. It discards CRC-failed packets and operates only on packets with correct CRC checks. The estimation is based on comparison of the remodulated data (convolutional encoding) and the soft demodulated rx data (before convolutional decoding).

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_snr_estimator.

    Args:
        psdu_size : size of the psdu in bytes (16,24,32)
        sf : spreading factor
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(psdu_size, sf):
        """
        make(int psdu_size, int sf) -> dsss_snr_estimator_sptr

        Estimates the SNR of received packets. It discards CRC-failed packets and operates only on packets with correct CRC checks. The estimation is based on comparison of the remodulated data (convolutional encoding) and the soft demodulated rx data (before convolutional decoding).

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_snr_estimator.

        Args:
            psdu_size : size of the psdu in bytes (16,24,32)
            sf : spreading factor
        """
        return _lpwan_swig.dsss_snr_estimator_make(psdu_size, sf)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_snr_estimator
    __del__ = lambda self: None
dsss_snr_estimator_swigregister = _lpwan_swig.dsss_snr_estimator_swigregister
dsss_snr_estimator_swigregister(dsss_snr_estimator)

def dsss_snr_estimator_make(psdu_size, sf):
    """
    dsss_snr_estimator_make(int psdu_size, int sf) -> dsss_snr_estimator_sptr

    Estimates the SNR of received packets. It discards CRC-failed packets and operates only on packets with correct CRC checks. The estimation is based on comparison of the remodulated data (convolutional encoding) and the soft demodulated rx data (before convolutional decoding).

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_snr_estimator.

    Args:
        psdu_size : size of the psdu in bytes (16,24,32)
        sf : spreading factor
    """
    return _lpwan_swig.dsss_snr_estimator_make(psdu_size, sf)

class dsss_snr_estimator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_snr_estimator)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_snr_estimator)> self) -> dsss_snr_estimator_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_snr_estimator)> self, dsss_snr_estimator p) -> dsss_snr_estimator_sptr
        """
        this = _lpwan_swig.new_dsss_snr_estimator_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_snr_estimator_sptr self) -> dsss_snr_estimator"""
        return _lpwan_swig.dsss_snr_estimator_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_snr_estimator_sptr
    __del__ = lambda self: None

    def make(self, psdu_size, sf):
        """
        make(dsss_snr_estimator_sptr self, int psdu_size, int sf) -> dsss_snr_estimator_sptr

        Estimates the SNR of received packets. It discards CRC-failed packets and operates only on packets with correct CRC checks. The estimation is based on comparison of the remodulated data (convolutional encoding) and the soft demodulated rx data (before convolutional decoding).

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_snr_estimator.

        Args:
            psdu_size : size of the psdu in bytes (16,24,32)
            sf : spreading factor
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_make(self, psdu_size, sf)


    def history(self):
        """history(dsss_snr_estimator_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_snr_estimator_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_snr_estimator_sptr self, int which, int delay)
        declare_sample_delay(dsss_snr_estimator_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_snr_estimator_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_snr_estimator_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_snr_estimator_sptr self) -> int"""
        return _lpwan_swig.dsss_snr_estimator_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_snr_estimator_sptr self) -> double"""
        return _lpwan_swig.dsss_snr_estimator_sptr_relative_rate(self)


    def start(self):
        """start(dsss_snr_estimator_sptr self) -> bool"""
        return _lpwan_swig.dsss_snr_estimator_sptr_start(self)


    def stop(self):
        """stop(dsss_snr_estimator_sptr self) -> bool"""
        return _lpwan_swig.dsss_snr_estimator_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_snr_estimator_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_snr_estimator_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_snr_estimator_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_snr_estimator_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_snr_estimator_sptr self) -> int"""
        return _lpwan_swig.dsss_snr_estimator_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_snr_estimator_sptr self, int m)"""
        return _lpwan_swig.dsss_snr_estimator_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_snr_estimator_sptr self)"""
        return _lpwan_swig.dsss_snr_estimator_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_snr_estimator_sptr self) -> bool"""
        return _lpwan_swig.dsss_snr_estimator_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_snr_estimator_sptr self, int m)"""
        return _lpwan_swig.dsss_snr_estimator_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_snr_estimator_sptr self) -> int"""
        return _lpwan_swig.dsss_snr_estimator_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_snr_estimator_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_snr_estimator_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_snr_estimator_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_snr_estimator_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_snr_estimator_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_snr_estimator_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_snr_estimator_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_snr_estimator_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_snr_estimator_sptr self, int which) -> float
        pc_input_buffers_full(dsss_snr_estimator_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_snr_estimator_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_snr_estimator_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_snr_estimator_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_snr_estimator_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_snr_estimator_sptr self, int which) -> float
        pc_output_buffers_full(dsss_snr_estimator_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_snr_estimator_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_snr_estimator_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_snr_estimator_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_snr_estimator_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_snr_estimator_sptr self) -> float"""
        return _lpwan_swig.dsss_snr_estimator_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_snr_estimator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_snr_estimator_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_snr_estimator_sptr self)"""
        return _lpwan_swig.dsss_snr_estimator_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_snr_estimator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_snr_estimator_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_snr_estimator_sptr self) -> int"""
        return _lpwan_swig.dsss_snr_estimator_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_snr_estimator_sptr self) -> int"""
        return _lpwan_swig.dsss_snr_estimator_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_snr_estimator_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_snr_estimator_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_snr_estimator_sptr self) -> std::string"""
        return _lpwan_swig.dsss_snr_estimator_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_snr_estimator_sptr self) -> std::string"""
        return _lpwan_swig.dsss_snr_estimator_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_snr_estimator_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_snr_estimator_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_snr_estimator_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_snr_estimator_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_snr_estimator_sptr self) -> long"""
        return _lpwan_swig.dsss_snr_estimator_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_snr_estimator_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_snr_estimator_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_snr_estimator_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_snr_estimator_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_snr_estimator_sptr self) -> std::string"""
        return _lpwan_swig.dsss_snr_estimator_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_snr_estimator_sptr self, std::string name)"""
        return _lpwan_swig.dsss_snr_estimator_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_snr_estimator_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_snr_estimator_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_snr_estimator_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_snr_estimator_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_snr_estimator_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_snr_estimator_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_snr_estimator_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_snr_estimator_sptr_message_subscribers(self, which_port)

dsss_snr_estimator_sptr_swigregister = _lpwan_swig.dsss_snr_estimator_sptr_swigregister
dsss_snr_estimator_sptr_swigregister(dsss_snr_estimator_sptr)


dsss_snr_estimator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_snr_estimator = dsss_snr_estimator.make;

class dsss_fragmentation(object):
    """
    Fragmentation Layer Std. 23.3.

    Takes a MAC frame and divides them into smaller fragments, which are tranmitted and acked as a seperate unit.

    For now the destination address is fixed and not extracted from the MAC packet. This could be relevant in a testbed with more than two participants, where the coordinator wants to send to different transceivers. As a workaround it should be possible to use multiple fragmentation blocks.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_fragmentation.

    Args:
        psdu_size : in bytes
        frak_policy_tx : only policy 1 supported so far
        frak_tx_timeout_ms : (frak policy 1) timeout for sending a frak and retransmission of fscd packet and fscd-ack
        frak_rx_timeout_ms : for receiving a frak, tx-abortion after timeout
        frame_max_retry : is the maximum number of retries of the same fragment/fraks until abortion
        fics_size_tx : fics = crc length, 2 or 4 bytes
        device_addr_short : address of this device, only short address (16bit) supported
        is_coordinator : true if pan coordinator, (FOR NOW NO EFFEKT )
        psdu_tx_dur : duration of one psdu on air, so fragments don't flood phy queue
        dest_addr_short : address of the destination (coordinator)
        verbose : print some (debug) info
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(psdu_size, frak_policy_tx, frak_tx_timeout_ms, frak_rx_timeout_ms, frame_max_retry, fics_size_tx, device_addr_short, is_coordinator, psdu_tx_dur, dest_addr_short, verbose):
        """
        make(int psdu_size, int frak_policy_tx, int frak_tx_timeout_ms, int frak_rx_timeout_ms, int frame_max_retry, int fics_size_tx, int device_addr_short, bool is_coordinator, int psdu_tx_dur, int dest_addr_short, bool verbose) -> dsss_fragmentation_sptr

        Fragmentation Layer Std. 23.3.

        Takes a MAC frame and divides them into smaller fragments, which are tranmitted and acked as a seperate unit.

        For now the destination address is fixed and not extracted from the MAC packet. This could be relevant in a testbed with more than two participants, where the coordinator wants to send to different transceivers. As a workaround it should be possible to use multiple fragmentation blocks.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_fragmentation.

        Args:
            psdu_size : in bytes
            frak_policy_tx : only policy 1 supported so far
            frak_tx_timeout_ms : (frak policy 1) timeout for sending a frak and retransmission of fscd packet and fscd-ack
            frak_rx_timeout_ms : for receiving a frak, tx-abortion after timeout
            frame_max_retry : is the maximum number of retries of the same fragment/fraks until abortion
            fics_size_tx : fics = crc length, 2 or 4 bytes
            device_addr_short : address of this device, only short address (16bit) supported
            is_coordinator : true if pan coordinator, (FOR NOW NO EFFEKT )
            psdu_tx_dur : duration of one psdu on air, so fragments don't flood phy queue
            dest_addr_short : address of the destination (coordinator)
            verbose : print some (debug) info
        """
        return _lpwan_swig.dsss_fragmentation_make(psdu_size, frak_policy_tx, frak_tx_timeout_ms, frak_rx_timeout_ms, frame_max_retry, fics_size_tx, device_addr_short, is_coordinator, psdu_tx_dur, dest_addr_short, verbose)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_fragmentation
    __del__ = lambda self: None
dsss_fragmentation_swigregister = _lpwan_swig.dsss_fragmentation_swigregister
dsss_fragmentation_swigregister(dsss_fragmentation)

def dsss_fragmentation_make(psdu_size, frak_policy_tx, frak_tx_timeout_ms, frak_rx_timeout_ms, frame_max_retry, fics_size_tx, device_addr_short, is_coordinator, psdu_tx_dur, dest_addr_short, verbose):
    """
    dsss_fragmentation_make(int psdu_size, int frak_policy_tx, int frak_tx_timeout_ms, int frak_rx_timeout_ms, int frame_max_retry, int fics_size_tx, int device_addr_short, bool is_coordinator, int psdu_tx_dur, int dest_addr_short, bool verbose) -> dsss_fragmentation_sptr

    Fragmentation Layer Std. 23.3.

    Takes a MAC frame and divides them into smaller fragments, which are tranmitted and acked as a seperate unit.

    For now the destination address is fixed and not extracted from the MAC packet. This could be relevant in a testbed with more than two participants, where the coordinator wants to send to different transceivers. As a workaround it should be possible to use multiple fragmentation blocks.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_fragmentation.

    Args:
        psdu_size : in bytes
        frak_policy_tx : only policy 1 supported so far
        frak_tx_timeout_ms : (frak policy 1) timeout for sending a frak and retransmission of fscd packet and fscd-ack
        frak_rx_timeout_ms : for receiving a frak, tx-abortion after timeout
        frame_max_retry : is the maximum number of retries of the same fragment/fraks until abortion
        fics_size_tx : fics = crc length, 2 or 4 bytes
        device_addr_short : address of this device, only short address (16bit) supported
        is_coordinator : true if pan coordinator, (FOR NOW NO EFFEKT )
        psdu_tx_dur : duration of one psdu on air, so fragments don't flood phy queue
        dest_addr_short : address of the destination (coordinator)
        verbose : print some (debug) info
    """
    return _lpwan_swig.dsss_fragmentation_make(psdu_size, frak_policy_tx, frak_tx_timeout_ms, frak_rx_timeout_ms, frame_max_retry, fics_size_tx, device_addr_short, is_coordinator, psdu_tx_dur, dest_addr_short, verbose)

class dsss_fragmentation_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_fragmentation)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_fragmentation)> self) -> dsss_fragmentation_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_fragmentation)> self, dsss_fragmentation p) -> dsss_fragmentation_sptr
        """
        this = _lpwan_swig.new_dsss_fragmentation_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_fragmentation_sptr self) -> dsss_fragmentation"""
        return _lpwan_swig.dsss_fragmentation_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_fragmentation_sptr
    __del__ = lambda self: None

    def make(self, psdu_size, frak_policy_tx, frak_tx_timeout_ms, frak_rx_timeout_ms, frame_max_retry, fics_size_tx, device_addr_short, is_coordinator, psdu_tx_dur, dest_addr_short, verbose):
        """
        make(dsss_fragmentation_sptr self, int psdu_size, int frak_policy_tx, int frak_tx_timeout_ms, int frak_rx_timeout_ms, int frame_max_retry, int fics_size_tx, int device_addr_short, bool is_coordinator, int psdu_tx_dur, int dest_addr_short, bool verbose) -> dsss_fragmentation_sptr

        Fragmentation Layer Std. 23.3.

        Takes a MAC frame and divides them into smaller fragments, which are tranmitted and acked as a seperate unit.

        For now the destination address is fixed and not extracted from the MAC packet. This could be relevant in a testbed with more than two participants, where the coordinator wants to send to different transceivers. As a workaround it should be possible to use multiple fragmentation blocks.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_fragmentation.

        Args:
            psdu_size : in bytes
            frak_policy_tx : only policy 1 supported so far
            frak_tx_timeout_ms : (frak policy 1) timeout for sending a frak and retransmission of fscd packet and fscd-ack
            frak_rx_timeout_ms : for receiving a frak, tx-abortion after timeout
            frame_max_retry : is the maximum number of retries of the same fragment/fraks until abortion
            fics_size_tx : fics = crc length, 2 or 4 bytes
            device_addr_short : address of this device, only short address (16bit) supported
            is_coordinator : true if pan coordinator, (FOR NOW NO EFFEKT )
            psdu_tx_dur : duration of one psdu on air, so fragments don't flood phy queue
            dest_addr_short : address of the destination (coordinator)
            verbose : print some (debug) info
        """
        return _lpwan_swig.dsss_fragmentation_sptr_make(self, psdu_size, frak_policy_tx, frak_tx_timeout_ms, frak_rx_timeout_ms, frame_max_retry, fics_size_tx, device_addr_short, is_coordinator, psdu_tx_dur, dest_addr_short, verbose)


    def history(self):
        """history(dsss_fragmentation_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_fragmentation_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_fragmentation_sptr self, int which, int delay)
        declare_sample_delay(dsss_fragmentation_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_fragmentation_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_fragmentation_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_fragmentation_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_fragmentation_sptr self) -> int"""
        return _lpwan_swig.dsss_fragmentation_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_fragmentation_sptr self) -> double"""
        return _lpwan_swig.dsss_fragmentation_sptr_relative_rate(self)


    def start(self):
        """start(dsss_fragmentation_sptr self) -> bool"""
        return _lpwan_swig.dsss_fragmentation_sptr_start(self)


    def stop(self):
        """stop(dsss_fragmentation_sptr self) -> bool"""
        return _lpwan_swig.dsss_fragmentation_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_fragmentation_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_fragmentation_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_fragmentation_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_fragmentation_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_fragmentation_sptr self) -> int"""
        return _lpwan_swig.dsss_fragmentation_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_fragmentation_sptr self, int m)"""
        return _lpwan_swig.dsss_fragmentation_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_fragmentation_sptr self)"""
        return _lpwan_swig.dsss_fragmentation_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_fragmentation_sptr self) -> bool"""
        return _lpwan_swig.dsss_fragmentation_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_fragmentation_sptr self, int m)"""
        return _lpwan_swig.dsss_fragmentation_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_fragmentation_sptr self) -> int"""
        return _lpwan_swig.dsss_fragmentation_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_fragmentation_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_fragmentation_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_fragmentation_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_fragmentation_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_fragmentation_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_fragmentation_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_fragmentation_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_fragmentation_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_fragmentation_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_fragmentation_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_fragmentation_sptr self, int which) -> float
        pc_input_buffers_full(dsss_fragmentation_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_fragmentation_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_fragmentation_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_fragmentation_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_fragmentation_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_fragmentation_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_fragmentation_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_fragmentation_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_fragmentation_sptr self, int which) -> float
        pc_output_buffers_full(dsss_fragmentation_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_fragmentation_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_fragmentation_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_fragmentation_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_fragmentation_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_fragmentation_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_fragmentation_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_fragmentation_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_fragmentation_sptr self) -> float"""
        return _lpwan_swig.dsss_fragmentation_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_fragmentation_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_fragmentation_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_fragmentation_sptr self)"""
        return _lpwan_swig.dsss_fragmentation_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_fragmentation_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_fragmentation_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_fragmentation_sptr self) -> int"""
        return _lpwan_swig.dsss_fragmentation_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_fragmentation_sptr self) -> int"""
        return _lpwan_swig.dsss_fragmentation_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_fragmentation_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_fragmentation_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_fragmentation_sptr self) -> std::string"""
        return _lpwan_swig.dsss_fragmentation_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_fragmentation_sptr self) -> std::string"""
        return _lpwan_swig.dsss_fragmentation_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_fragmentation_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_fragmentation_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_fragmentation_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_fragmentation_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_fragmentation_sptr self) -> long"""
        return _lpwan_swig.dsss_fragmentation_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_fragmentation_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_fragmentation_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_fragmentation_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_fragmentation_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_fragmentation_sptr self) -> std::string"""
        return _lpwan_swig.dsss_fragmentation_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_fragmentation_sptr self, std::string name)"""
        return _lpwan_swig.dsss_fragmentation_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_fragmentation_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_fragmentation_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_fragmentation_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_fragmentation_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_fragmentation_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_fragmentation_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_fragmentation_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_fragmentation_sptr_message_subscribers(self, which_port)

dsss_fragmentation_sptr_swigregister = _lpwan_swig.dsss_fragmentation_sptr_swigregister
dsss_fragmentation_sptr_swigregister(dsss_fragmentation_sptr)


dsss_fragmentation_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_fragmentation = dsss_fragmentation.make;

class dsss_filter_crc_packets(object):
    """
    Filters out packets with unsuccessful CRC check.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_filter_crc_packets.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> dsss_filter_crc_packets_sptr

        Filters out packets with unsuccessful CRC check.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_filter_crc_packets.
        """
        return _lpwan_swig.dsss_filter_crc_packets_make()

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_dsss_filter_crc_packets
    __del__ = lambda self: None
dsss_filter_crc_packets_swigregister = _lpwan_swig.dsss_filter_crc_packets_swigregister
dsss_filter_crc_packets_swigregister(dsss_filter_crc_packets)

def dsss_filter_crc_packets_make():
    """
    dsss_filter_crc_packets_make() -> dsss_filter_crc_packets_sptr

    Filters out packets with unsuccessful CRC check.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::dsss_filter_crc_packets.
    """
    return _lpwan_swig.dsss_filter_crc_packets_make()

class dsss_filter_crc_packets_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::dsss_filter_crc_packets)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::dsss_filter_crc_packets)> self) -> dsss_filter_crc_packets_sptr
        __init__(boost::shared_ptr<(gr::lpwan::dsss_filter_crc_packets)> self, dsss_filter_crc_packets p) -> dsss_filter_crc_packets_sptr
        """
        this = _lpwan_swig.new_dsss_filter_crc_packets_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dsss_filter_crc_packets_sptr self) -> dsss_filter_crc_packets"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_dsss_filter_crc_packets_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(dsss_filter_crc_packets_sptr self) -> dsss_filter_crc_packets_sptr

        Filters out packets with unsuccessful CRC check.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::dsss_filter_crc_packets.
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_make(self)


    def history(self):
        """history(dsss_filter_crc_packets_sptr self) -> unsigned int"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dsss_filter_crc_packets_sptr self, int which, int delay)
        declare_sample_delay(dsss_filter_crc_packets_sptr self, unsigned int delay)
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dsss_filter_crc_packets_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dsss_filter_crc_packets_sptr self) -> int"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dsss_filter_crc_packets_sptr self) -> double"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_relative_rate(self)


    def start(self):
        """start(dsss_filter_crc_packets_sptr self) -> bool"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_start(self)


    def stop(self):
        """stop(dsss_filter_crc_packets_sptr self) -> bool"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dsss_filter_crc_packets_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dsss_filter_crc_packets_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dsss_filter_crc_packets_sptr self) -> int"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dsss_filter_crc_packets_sptr self, int m)"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dsss_filter_crc_packets_sptr self)"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dsss_filter_crc_packets_sptr self) -> bool"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dsss_filter_crc_packets_sptr self, int m)"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dsss_filter_crc_packets_sptr self) -> int"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dsss_filter_crc_packets_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dsss_filter_crc_packets_sptr self, long max_output_buffer)
        set_max_output_buffer(dsss_filter_crc_packets_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dsss_filter_crc_packets_sptr self, int i) -> long"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dsss_filter_crc_packets_sptr self, long min_output_buffer)
        set_min_output_buffer(dsss_filter_crc_packets_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dsss_filter_crc_packets_sptr self, int which) -> float
        pc_input_buffers_full(dsss_filter_crc_packets_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dsss_filter_crc_packets_sptr self, int which) -> float
        pc_input_buffers_full_avg(dsss_filter_crc_packets_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dsss_filter_crc_packets_sptr self, int which) -> float
        pc_input_buffers_full_var(dsss_filter_crc_packets_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dsss_filter_crc_packets_sptr self, int which) -> float
        pc_output_buffers_full(dsss_filter_crc_packets_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dsss_filter_crc_packets_sptr self, int which) -> float
        pc_output_buffers_full_avg(dsss_filter_crc_packets_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dsss_filter_crc_packets_sptr self, int which) -> float
        pc_output_buffers_full_var(dsss_filter_crc_packets_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dsss_filter_crc_packets_sptr self) -> float"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dsss_filter_crc_packets_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dsss_filter_crc_packets_sptr self)"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dsss_filter_crc_packets_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dsss_filter_crc_packets_sptr self) -> int"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dsss_filter_crc_packets_sptr self) -> int"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dsss_filter_crc_packets_sptr self, int priority) -> int"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dsss_filter_crc_packets_sptr self) -> std::string"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dsss_filter_crc_packets_sptr self) -> std::string"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dsss_filter_crc_packets_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dsss_filter_crc_packets_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dsss_filter_crc_packets_sptr self) -> long"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dsss_filter_crc_packets_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dsss_filter_crc_packets_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dsss_filter_crc_packets_sptr self) -> std::string"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dsss_filter_crc_packets_sptr self, std::string name)"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dsss_filter_crc_packets_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dsss_filter_crc_packets_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dsss_filter_crc_packets_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dsss_filter_crc_packets_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.dsss_filter_crc_packets_sptr_message_subscribers(self, which_port)

dsss_filter_crc_packets_sptr_swigregister = _lpwan_swig.dsss_filter_crc_packets_sptr_swigregister
dsss_filter_crc_packets_sptr_swigregister(dsss_filter_crc_packets_sptr)


dsss_filter_crc_packets_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dsss_filter_crc_packets = dsss_filter_crc_packets.make;

class fsk_lecim_interleaver(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_interleaver.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_interleaver's constructor is in a private implementation class. lpwan::fsk_lecim_interleaver::make is the public interface for creating new instances.

    Args:
        phr : 
        nBlock : 
        len_tag : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(phr, nBlock, len_tag):
        """
        make(bool phr, int nBlock, std::string len_tag) -> fsk_lecim_interleaver_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_interleaver.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_interleaver's constructor is in a private implementation class. lpwan::fsk_lecim_interleaver::make is the public interface for creating new instances.

        Args:
            phr : 
            nBlock : 
            len_tag : 
        """
        return _lpwan_swig.fsk_lecim_interleaver_make(phr, nBlock, len_tag)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_interleaver
    __del__ = lambda self: None
fsk_lecim_interleaver_swigregister = _lpwan_swig.fsk_lecim_interleaver_swigregister
fsk_lecim_interleaver_swigregister(fsk_lecim_interleaver)

def fsk_lecim_interleaver_make(phr, nBlock, len_tag):
    """
    fsk_lecim_interleaver_make(bool phr, int nBlock, std::string len_tag) -> fsk_lecim_interleaver_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_interleaver.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_interleaver's constructor is in a private implementation class. lpwan::fsk_lecim_interleaver::make is the public interface for creating new instances.

    Args:
        phr : 
        nBlock : 
        len_tag : 
    """
    return _lpwan_swig.fsk_lecim_interleaver_make(phr, nBlock, len_tag)

class fsk_lecim_interleaver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::fsk_lecim_interleaver)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_interleaver)> self) -> fsk_lecim_interleaver_sptr
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_interleaver)> self, fsk_lecim_interleaver p) -> fsk_lecim_interleaver_sptr
        """
        this = _lpwan_swig.new_fsk_lecim_interleaver_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk_lecim_interleaver_sptr self) -> fsk_lecim_interleaver"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_interleaver_sptr
    __del__ = lambda self: None

    def make(self, phr, nBlock, len_tag):
        """
        make(fsk_lecim_interleaver_sptr self, bool phr, int nBlock, std::string len_tag) -> fsk_lecim_interleaver_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_interleaver.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_interleaver's constructor is in a private implementation class. lpwan::fsk_lecim_interleaver::make is the public interface for creating new instances.

        Args:
            phr : 
            nBlock : 
            len_tag : 
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_make(self, phr, nBlock, len_tag)


    def history(self):
        """history(fsk_lecim_interleaver_sptr self) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk_lecim_interleaver_sptr self, int which, int delay)
        declare_sample_delay(fsk_lecim_interleaver_sptr self, unsigned int delay)
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk_lecim_interleaver_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk_lecim_interleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk_lecim_interleaver_sptr self) -> double"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_relative_rate(self)


    def start(self):
        """start(fsk_lecim_interleaver_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_start(self)


    def stop(self):
        """stop(fsk_lecim_interleaver_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk_lecim_interleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk_lecim_interleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk_lecim_interleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk_lecim_interleaver_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk_lecim_interleaver_sptr self)"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk_lecim_interleaver_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk_lecim_interleaver_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk_lecim_interleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk_lecim_interleaver_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk_lecim_interleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk_lecim_interleaver_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk_lecim_interleaver_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk_lecim_interleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk_lecim_interleaver_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk_lecim_interleaver_sptr self, int which) -> float
        pc_input_buffers_full(fsk_lecim_interleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk_lecim_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk_lecim_interleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk_lecim_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk_lecim_interleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk_lecim_interleaver_sptr self, int which) -> float
        pc_output_buffers_full(fsk_lecim_interleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk_lecim_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk_lecim_interleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk_lecim_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk_lecim_interleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk_lecim_interleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk_lecim_interleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk_lecim_interleaver_sptr self)"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk_lecim_interleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk_lecim_interleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk_lecim_interleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk_lecim_interleaver_sptr self, int priority) -> int"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk_lecim_interleaver_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk_lecim_interleaver_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk_lecim_interleaver_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk_lecim_interleaver_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk_lecim_interleaver_sptr self) -> long"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk_lecim_interleaver_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk_lecim_interleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk_lecim_interleaver_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk_lecim_interleaver_sptr self, std::string name)"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk_lecim_interleaver_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk_lecim_interleaver_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk_lecim_interleaver_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk_lecim_interleaver_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_interleaver_sptr_message_subscribers(self, which_port)

fsk_lecim_interleaver_sptr_swigregister = _lpwan_swig.fsk_lecim_interleaver_sptr_swigregister
fsk_lecim_interleaver_sptr_swigregister(fsk_lecim_interleaver_sptr)


fsk_lecim_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk_lecim_interleaver = fsk_lecim_interleaver.make;

class fsk_lecim_deinterleaver(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_deinterleaver.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_deinterleaver's constructor is in a private implementation class. lpwan::fsk_lecim_deinterleaver::make is the public interface for creating new instances.

    Args:
        phr : 
        nBlock : 
        len_tag : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(phr, nBlock, len_tag):
        """
        make(bool phr, int nBlock, std::string len_tag) -> fsk_lecim_deinterleaver_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_deinterleaver.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_deinterleaver's constructor is in a private implementation class. lpwan::fsk_lecim_deinterleaver::make is the public interface for creating new instances.

        Args:
            phr : 
            nBlock : 
            len_tag : 
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_make(phr, nBlock, len_tag)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_deinterleaver
    __del__ = lambda self: None
fsk_lecim_deinterleaver_swigregister = _lpwan_swig.fsk_lecim_deinterleaver_swigregister
fsk_lecim_deinterleaver_swigregister(fsk_lecim_deinterleaver)

def fsk_lecim_deinterleaver_make(phr, nBlock, len_tag):
    """
    fsk_lecim_deinterleaver_make(bool phr, int nBlock, std::string len_tag) -> fsk_lecim_deinterleaver_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_deinterleaver.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_deinterleaver's constructor is in a private implementation class. lpwan::fsk_lecim_deinterleaver::make is the public interface for creating new instances.

    Args:
        phr : 
        nBlock : 
        len_tag : 
    """
    return _lpwan_swig.fsk_lecim_deinterleaver_make(phr, nBlock, len_tag)

class fsk_lecim_deinterleaver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::fsk_lecim_deinterleaver)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_deinterleaver)> self) -> fsk_lecim_deinterleaver_sptr
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_deinterleaver)> self, fsk_lecim_deinterleaver p) -> fsk_lecim_deinterleaver_sptr
        """
        this = _lpwan_swig.new_fsk_lecim_deinterleaver_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk_lecim_deinterleaver_sptr self) -> fsk_lecim_deinterleaver"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_deinterleaver_sptr
    __del__ = lambda self: None

    def make(self, phr, nBlock, len_tag):
        """
        make(fsk_lecim_deinterleaver_sptr self, bool phr, int nBlock, std::string len_tag) -> fsk_lecim_deinterleaver_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_deinterleaver.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_deinterleaver's constructor is in a private implementation class. lpwan::fsk_lecim_deinterleaver::make is the public interface for creating new instances.

        Args:
            phr : 
            nBlock : 
            len_tag : 
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_make(self, phr, nBlock, len_tag)


    def history(self):
        """history(fsk_lecim_deinterleaver_sptr self) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk_lecim_deinterleaver_sptr self, int which, int delay)
        declare_sample_delay(fsk_lecim_deinterleaver_sptr self, unsigned int delay)
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk_lecim_deinterleaver_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk_lecim_deinterleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk_lecim_deinterleaver_sptr self) -> double"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_relative_rate(self)


    def start(self):
        """start(fsk_lecim_deinterleaver_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_start(self)


    def stop(self):
        """stop(fsk_lecim_deinterleaver_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk_lecim_deinterleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk_lecim_deinterleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk_lecim_deinterleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk_lecim_deinterleaver_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk_lecim_deinterleaver_sptr self)"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk_lecim_deinterleaver_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk_lecim_deinterleaver_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk_lecim_deinterleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk_lecim_deinterleaver_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk_lecim_deinterleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk_lecim_deinterleaver_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk_lecim_deinterleaver_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk_lecim_deinterleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk_lecim_deinterleaver_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk_lecim_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full(fsk_lecim_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk_lecim_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk_lecim_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk_lecim_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk_lecim_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk_lecim_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full(fsk_lecim_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk_lecim_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk_lecim_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk_lecim_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk_lecim_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk_lecim_deinterleaver_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk_lecim_deinterleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk_lecim_deinterleaver_sptr self)"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk_lecim_deinterleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk_lecim_deinterleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk_lecim_deinterleaver_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk_lecim_deinterleaver_sptr self, int priority) -> int"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk_lecim_deinterleaver_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk_lecim_deinterleaver_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk_lecim_deinterleaver_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk_lecim_deinterleaver_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk_lecim_deinterleaver_sptr self) -> long"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk_lecim_deinterleaver_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk_lecim_deinterleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk_lecim_deinterleaver_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk_lecim_deinterleaver_sptr self, std::string name)"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk_lecim_deinterleaver_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk_lecim_deinterleaver_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk_lecim_deinterleaver_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk_lecim_deinterleaver_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_deinterleaver_sptr_message_subscribers(self, which_port)

fsk_lecim_deinterleaver_sptr_swigregister = _lpwan_swig.fsk_lecim_deinterleaver_sptr_swigregister
fsk_lecim_deinterleaver_sptr_swigregister(fsk_lecim_deinterleaver_sptr)


fsk_lecim_deinterleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk_lecim_deinterleaver = fsk_lecim_deinterleaver.make;

class fsk_lecim_phr_pdu_demux(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_phr_pdu_demux.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_phr_pdu_demux's constructor is in a private implementation class. lpwan::fsk_lecim_phr_pdu_demux::make is the public interface for creating new instances.

    Args:
        sps : 
        symbol_rate : 
        sf : 
        output_symbols : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sps, symbol_rate, sf, output_symbols):
        """
        make(int sps, int symbol_rate, int sf, bool output_symbols) -> fsk_lecim_phr_pdu_demux_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_phr_pdu_demux.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_phr_pdu_demux's constructor is in a private implementation class. lpwan::fsk_lecim_phr_pdu_demux::make is the public interface for creating new instances.

        Args:
            sps : 
            symbol_rate : 
            sf : 
            output_symbols : 
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_make(sps, symbol_rate, sf, output_symbols)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_phr_pdu_demux
    __del__ = lambda self: None
fsk_lecim_phr_pdu_demux_swigregister = _lpwan_swig.fsk_lecim_phr_pdu_demux_swigregister
fsk_lecim_phr_pdu_demux_swigregister(fsk_lecim_phr_pdu_demux)

def fsk_lecim_phr_pdu_demux_make(sps, symbol_rate, sf, output_symbols):
    """
    fsk_lecim_phr_pdu_demux_make(int sps, int symbol_rate, int sf, bool output_symbols) -> fsk_lecim_phr_pdu_demux_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_phr_pdu_demux.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_phr_pdu_demux's constructor is in a private implementation class. lpwan::fsk_lecim_phr_pdu_demux::make is the public interface for creating new instances.

    Args:
        sps : 
        symbol_rate : 
        sf : 
        output_symbols : 
    """
    return _lpwan_swig.fsk_lecim_phr_pdu_demux_make(sps, symbol_rate, sf, output_symbols)

class fsk_lecim_phr_pdu_demux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::fsk_lecim_phr_pdu_demux)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_phr_pdu_demux)> self) -> fsk_lecim_phr_pdu_demux_sptr
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_phr_pdu_demux)> self, fsk_lecim_phr_pdu_demux p) -> fsk_lecim_phr_pdu_demux_sptr
        """
        this = _lpwan_swig.new_fsk_lecim_phr_pdu_demux_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk_lecim_phr_pdu_demux_sptr self) -> fsk_lecim_phr_pdu_demux"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_phr_pdu_demux_sptr
    __del__ = lambda self: None

    def make(self, sps, symbol_rate, sf, output_symbols):
        """
        make(fsk_lecim_phr_pdu_demux_sptr self, int sps, int symbol_rate, int sf, bool output_symbols) -> fsk_lecim_phr_pdu_demux_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_phr_pdu_demux.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_phr_pdu_demux's constructor is in a private implementation class. lpwan::fsk_lecim_phr_pdu_demux::make is the public interface for creating new instances.

        Args:
            sps : 
            symbol_rate : 
            sf : 
            output_symbols : 
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_make(self, sps, symbol_rate, sf, output_symbols)


    def history(self):
        """history(fsk_lecim_phr_pdu_demux_sptr self) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk_lecim_phr_pdu_demux_sptr self, int which, int delay)
        declare_sample_delay(fsk_lecim_phr_pdu_demux_sptr self, unsigned int delay)
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk_lecim_phr_pdu_demux_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk_lecim_phr_pdu_demux_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk_lecim_phr_pdu_demux_sptr self) -> double"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_relative_rate(self)


    def start(self):
        """start(fsk_lecim_phr_pdu_demux_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_start(self)


    def stop(self):
        """stop(fsk_lecim_phr_pdu_demux_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk_lecim_phr_pdu_demux_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk_lecim_phr_pdu_demux_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk_lecim_phr_pdu_demux_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk_lecim_phr_pdu_demux_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk_lecim_phr_pdu_demux_sptr self)"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk_lecim_phr_pdu_demux_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk_lecim_phr_pdu_demux_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk_lecim_phr_pdu_demux_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk_lecim_phr_pdu_demux_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk_lecim_phr_pdu_demux_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk_lecim_phr_pdu_demux_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk_lecim_phr_pdu_demux_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk_lecim_phr_pdu_demux_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk_lecim_phr_pdu_demux_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk_lecim_phr_pdu_demux_sptr self, int which) -> float
        pc_input_buffers_full(fsk_lecim_phr_pdu_demux_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk_lecim_phr_pdu_demux_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk_lecim_phr_pdu_demux_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk_lecim_phr_pdu_demux_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk_lecim_phr_pdu_demux_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk_lecim_phr_pdu_demux_sptr self, int which) -> float
        pc_output_buffers_full(fsk_lecim_phr_pdu_demux_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk_lecim_phr_pdu_demux_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk_lecim_phr_pdu_demux_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk_lecim_phr_pdu_demux_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk_lecim_phr_pdu_demux_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk_lecim_phr_pdu_demux_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk_lecim_phr_pdu_demux_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk_lecim_phr_pdu_demux_sptr self)"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk_lecim_phr_pdu_demux_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk_lecim_phr_pdu_demux_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk_lecim_phr_pdu_demux_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk_lecim_phr_pdu_demux_sptr self, int priority) -> int"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk_lecim_phr_pdu_demux_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk_lecim_phr_pdu_demux_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk_lecim_phr_pdu_demux_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk_lecim_phr_pdu_demux_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk_lecim_phr_pdu_demux_sptr self) -> long"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk_lecim_phr_pdu_demux_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk_lecim_phr_pdu_demux_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk_lecim_phr_pdu_demux_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk_lecim_phr_pdu_demux_sptr self, std::string name)"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk_lecim_phr_pdu_demux_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk_lecim_phr_pdu_demux_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk_lecim_phr_pdu_demux_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk_lecim_phr_pdu_demux_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_message_subscribers(self, which_port)

fsk_lecim_phr_pdu_demux_sptr_swigregister = _lpwan_swig.fsk_lecim_phr_pdu_demux_sptr_swigregister
fsk_lecim_phr_pdu_demux_sptr_swigregister(fsk_lecim_phr_pdu_demux_sptr)


fsk_lecim_phr_pdu_demux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk_lecim_phr_pdu_demux = fsk_lecim_phr_pdu_demux.make;

class fsk_lecim_corr_est_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_corr_est_cc.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_corr_est_cc's constructor is in a private implementation class. lpwan::fsk_lecim_corr_est_cc::make is the public interface for creating new instances.

    Args:
        symbols : 
        sps : 
        mark_delay : 
        threshold : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(symbols, sps, mark_delay, threshold=0.9):
        """
        make(pmt_vector_cfloat symbols, int sps, unsigned int mark_delay, float threshold=0.9) -> fsk_lecim_corr_est_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_corr_est_cc.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_corr_est_cc's constructor is in a private implementation class. lpwan::fsk_lecim_corr_est_cc::make is the public interface for creating new instances.

        Args:
            symbols : 
            sps : 
            mark_delay : 
            threshold : 
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_make(symbols, sps, mark_delay, threshold)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_corr_est_cc
    __del__ = lambda self: None
fsk_lecim_corr_est_cc_swigregister = _lpwan_swig.fsk_lecim_corr_est_cc_swigregister
fsk_lecim_corr_est_cc_swigregister(fsk_lecim_corr_est_cc)

def fsk_lecim_corr_est_cc_make(symbols, sps, mark_delay, threshold=0.9):
    """
    fsk_lecim_corr_est_cc_make(pmt_vector_cfloat symbols, int sps, unsigned int mark_delay, float threshold=0.9) -> fsk_lecim_corr_est_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_corr_est_cc.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_corr_est_cc's constructor is in a private implementation class. lpwan::fsk_lecim_corr_est_cc::make is the public interface for creating new instances.

    Args:
        symbols : 
        sps : 
        mark_delay : 
        threshold : 
    """
    return _lpwan_swig.fsk_lecim_corr_est_cc_make(symbols, sps, mark_delay, threshold)

class fsk_lecim_corr_est_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::fsk_lecim_corr_est_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_corr_est_cc)> self) -> fsk_lecim_corr_est_cc_sptr
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_corr_est_cc)> self, fsk_lecim_corr_est_cc p) -> fsk_lecim_corr_est_cc_sptr
        """
        this = _lpwan_swig.new_fsk_lecim_corr_est_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk_lecim_corr_est_cc_sptr self) -> fsk_lecim_corr_est_cc"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_corr_est_cc_sptr
    __del__ = lambda self: None

    def make(self, symbols, sps, mark_delay, threshold=0.9):
        """
        make(fsk_lecim_corr_est_cc_sptr self, pmt_vector_cfloat symbols, int sps, unsigned int mark_delay, float threshold=0.9) -> fsk_lecim_corr_est_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_corr_est_cc.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_corr_est_cc's constructor is in a private implementation class. lpwan::fsk_lecim_corr_est_cc::make is the public interface for creating new instances.

        Args:
            symbols : 
            sps : 
            mark_delay : 
            threshold : 
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_make(self, symbols, sps, mark_delay, threshold)


    def history(self):
        """history(fsk_lecim_corr_est_cc_sptr self) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk_lecim_corr_est_cc_sptr self, int which, int delay)
        declare_sample_delay(fsk_lecim_corr_est_cc_sptr self, unsigned int delay)
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk_lecim_corr_est_cc_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk_lecim_corr_est_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk_lecim_corr_est_cc_sptr self) -> double"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_relative_rate(self)


    def start(self):
        """start(fsk_lecim_corr_est_cc_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_start(self)


    def stop(self):
        """stop(fsk_lecim_corr_est_cc_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk_lecim_corr_est_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk_lecim_corr_est_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk_lecim_corr_est_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk_lecim_corr_est_cc_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk_lecim_corr_est_cc_sptr self)"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk_lecim_corr_est_cc_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk_lecim_corr_est_cc_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk_lecim_corr_est_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk_lecim_corr_est_cc_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk_lecim_corr_est_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk_lecim_corr_est_cc_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk_lecim_corr_est_cc_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk_lecim_corr_est_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk_lecim_corr_est_cc_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk_lecim_corr_est_cc_sptr self, int which) -> float
        pc_input_buffers_full(fsk_lecim_corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk_lecim_corr_est_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk_lecim_corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk_lecim_corr_est_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk_lecim_corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk_lecim_corr_est_cc_sptr self, int which) -> float
        pc_output_buffers_full(fsk_lecim_corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk_lecim_corr_est_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk_lecim_corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk_lecim_corr_est_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk_lecim_corr_est_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk_lecim_corr_est_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk_lecim_corr_est_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk_lecim_corr_est_cc_sptr self)"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk_lecim_corr_est_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk_lecim_corr_est_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk_lecim_corr_est_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk_lecim_corr_est_cc_sptr self, int priority) -> int"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk_lecim_corr_est_cc_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk_lecim_corr_est_cc_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk_lecim_corr_est_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk_lecim_corr_est_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk_lecim_corr_est_cc_sptr self) -> long"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk_lecim_corr_est_cc_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk_lecim_corr_est_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk_lecim_corr_est_cc_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk_lecim_corr_est_cc_sptr self, std::string name)"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk_lecim_corr_est_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk_lecim_corr_est_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk_lecim_corr_est_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk_lecim_corr_est_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_corr_est_cc_sptr_message_subscribers(self, which_port)

fsk_lecim_corr_est_cc_sptr_swigregister = _lpwan_swig.fsk_lecim_corr_est_cc_sptr_swigregister
fsk_lecim_corr_est_cc_sptr_swigregister(fsk_lecim_corr_est_cc_sptr)


fsk_lecim_corr_est_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk_lecim_corr_est_cc = fsk_lecim_corr_est_cc.make;

class fsk_lecim_phr_parser(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_phr_parser.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_phr_parser's constructor is in a private implementation class. lpwan::fsk_lecim_phr_parser::make is the public interface for creating new instances.

    Args:
        len_tag_key : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len_tag_key):
        """
        make(std::string const len_tag_key) -> fsk_lecim_phr_parser_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_phr_parser.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_phr_parser's constructor is in a private implementation class. lpwan::fsk_lecim_phr_parser::make is the public interface for creating new instances.

        Args:
            len_tag_key : 
        """
        return _lpwan_swig.fsk_lecim_phr_parser_make(len_tag_key)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_phr_parser
    __del__ = lambda self: None
fsk_lecim_phr_parser_swigregister = _lpwan_swig.fsk_lecim_phr_parser_swigregister
fsk_lecim_phr_parser_swigregister(fsk_lecim_phr_parser)

def fsk_lecim_phr_parser_make(len_tag_key):
    """
    fsk_lecim_phr_parser_make(std::string const len_tag_key) -> fsk_lecim_phr_parser_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_phr_parser.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_phr_parser's constructor is in a private implementation class. lpwan::fsk_lecim_phr_parser::make is the public interface for creating new instances.

    Args:
        len_tag_key : 
    """
    return _lpwan_swig.fsk_lecim_phr_parser_make(len_tag_key)

class fsk_lecim_phr_parser_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::fsk_lecim_phr_parser)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_phr_parser)> self) -> fsk_lecim_phr_parser_sptr
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_phr_parser)> self, fsk_lecim_phr_parser p) -> fsk_lecim_phr_parser_sptr
        """
        this = _lpwan_swig.new_fsk_lecim_phr_parser_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk_lecim_phr_parser_sptr self) -> fsk_lecim_phr_parser"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_phr_parser_sptr
    __del__ = lambda self: None

    def make(self, len_tag_key):
        """
        make(fsk_lecim_phr_parser_sptr self, std::string const len_tag_key) -> fsk_lecim_phr_parser_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_phr_parser.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_phr_parser's constructor is in a private implementation class. lpwan::fsk_lecim_phr_parser::make is the public interface for creating new instances.

        Args:
            len_tag_key : 
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_make(self, len_tag_key)


    def history(self):
        """history(fsk_lecim_phr_parser_sptr self) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk_lecim_phr_parser_sptr self, int which, int delay)
        declare_sample_delay(fsk_lecim_phr_parser_sptr self, unsigned int delay)
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk_lecim_phr_parser_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk_lecim_phr_parser_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk_lecim_phr_parser_sptr self) -> double"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_relative_rate(self)


    def start(self):
        """start(fsk_lecim_phr_parser_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_start(self)


    def stop(self):
        """stop(fsk_lecim_phr_parser_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk_lecim_phr_parser_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk_lecim_phr_parser_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk_lecim_phr_parser_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk_lecim_phr_parser_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk_lecim_phr_parser_sptr self)"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk_lecim_phr_parser_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk_lecim_phr_parser_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk_lecim_phr_parser_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk_lecim_phr_parser_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk_lecim_phr_parser_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk_lecim_phr_parser_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk_lecim_phr_parser_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk_lecim_phr_parser_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk_lecim_phr_parser_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk_lecim_phr_parser_sptr self, int which) -> float
        pc_input_buffers_full(fsk_lecim_phr_parser_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk_lecim_phr_parser_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk_lecim_phr_parser_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk_lecim_phr_parser_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk_lecim_phr_parser_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk_lecim_phr_parser_sptr self, int which) -> float
        pc_output_buffers_full(fsk_lecim_phr_parser_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk_lecim_phr_parser_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk_lecim_phr_parser_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk_lecim_phr_parser_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk_lecim_phr_parser_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk_lecim_phr_parser_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk_lecim_phr_parser_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk_lecim_phr_parser_sptr self)"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk_lecim_phr_parser_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk_lecim_phr_parser_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk_lecim_phr_parser_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk_lecim_phr_parser_sptr self, int priority) -> int"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk_lecim_phr_parser_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk_lecim_phr_parser_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk_lecim_phr_parser_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk_lecim_phr_parser_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk_lecim_phr_parser_sptr self) -> long"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk_lecim_phr_parser_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk_lecim_phr_parser_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk_lecim_phr_parser_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk_lecim_phr_parser_sptr self, std::string name)"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk_lecim_phr_parser_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk_lecim_phr_parser_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk_lecim_phr_parser_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk_lecim_phr_parser_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_phr_parser_sptr_message_subscribers(self, which_port)

fsk_lecim_phr_parser_sptr_swigregister = _lpwan_swig.fsk_lecim_phr_parser_sptr_swigregister
fsk_lecim_phr_parser_sptr_swigregister(fsk_lecim_phr_parser_sptr)


fsk_lecim_phr_parser_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk_lecim_phr_parser = fsk_lecim_phr_parser.make;

class fsk_lecim_normalize_fcc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_normalize_fcc.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_normalize_fcc's constructor is in a private implementation class. lpwan::fsk_lecim_normalize_fcc::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> fsk_lecim_normalize_fcc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_normalize_fcc.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_normalize_fcc's constructor is in a private implementation class. lpwan::fsk_lecim_normalize_fcc::make is the public interface for creating new instances.
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_make()

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_normalize_fcc
    __del__ = lambda self: None
fsk_lecim_normalize_fcc_swigregister = _lpwan_swig.fsk_lecim_normalize_fcc_swigregister
fsk_lecim_normalize_fcc_swigregister(fsk_lecim_normalize_fcc)

def fsk_lecim_normalize_fcc_make():
    """
    fsk_lecim_normalize_fcc_make() -> fsk_lecim_normalize_fcc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_normalize_fcc.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_normalize_fcc's constructor is in a private implementation class. lpwan::fsk_lecim_normalize_fcc::make is the public interface for creating new instances.
    """
    return _lpwan_swig.fsk_lecim_normalize_fcc_make()

class fsk_lecim_normalize_fcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::fsk_lecim_normalize_fcc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_normalize_fcc)> self) -> fsk_lecim_normalize_fcc_sptr
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_normalize_fcc)> self, fsk_lecim_normalize_fcc p) -> fsk_lecim_normalize_fcc_sptr
        """
        this = _lpwan_swig.new_fsk_lecim_normalize_fcc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk_lecim_normalize_fcc_sptr self) -> fsk_lecim_normalize_fcc"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_normalize_fcc_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(fsk_lecim_normalize_fcc_sptr self) -> fsk_lecim_normalize_fcc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_normalize_fcc.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_normalize_fcc's constructor is in a private implementation class. lpwan::fsk_lecim_normalize_fcc::make is the public interface for creating new instances.
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_make(self)


    def history(self):
        """history(fsk_lecim_normalize_fcc_sptr self) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk_lecim_normalize_fcc_sptr self, int which, int delay)
        declare_sample_delay(fsk_lecim_normalize_fcc_sptr self, unsigned int delay)
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk_lecim_normalize_fcc_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk_lecim_normalize_fcc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk_lecim_normalize_fcc_sptr self) -> double"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_relative_rate(self)


    def start(self):
        """start(fsk_lecim_normalize_fcc_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_start(self)


    def stop(self):
        """stop(fsk_lecim_normalize_fcc_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk_lecim_normalize_fcc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk_lecim_normalize_fcc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk_lecim_normalize_fcc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk_lecim_normalize_fcc_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk_lecim_normalize_fcc_sptr self)"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk_lecim_normalize_fcc_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk_lecim_normalize_fcc_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk_lecim_normalize_fcc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk_lecim_normalize_fcc_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk_lecim_normalize_fcc_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk_lecim_normalize_fcc_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk_lecim_normalize_fcc_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk_lecim_normalize_fcc_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk_lecim_normalize_fcc_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk_lecim_normalize_fcc_sptr self, int which) -> float
        pc_input_buffers_full(fsk_lecim_normalize_fcc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk_lecim_normalize_fcc_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk_lecim_normalize_fcc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk_lecim_normalize_fcc_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk_lecim_normalize_fcc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk_lecim_normalize_fcc_sptr self, int which) -> float
        pc_output_buffers_full(fsk_lecim_normalize_fcc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk_lecim_normalize_fcc_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk_lecim_normalize_fcc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk_lecim_normalize_fcc_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk_lecim_normalize_fcc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk_lecim_normalize_fcc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk_lecim_normalize_fcc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk_lecim_normalize_fcc_sptr self)"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk_lecim_normalize_fcc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk_lecim_normalize_fcc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk_lecim_normalize_fcc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk_lecim_normalize_fcc_sptr self, int priority) -> int"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk_lecim_normalize_fcc_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk_lecim_normalize_fcc_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk_lecim_normalize_fcc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk_lecim_normalize_fcc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk_lecim_normalize_fcc_sptr self) -> long"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk_lecim_normalize_fcc_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk_lecim_normalize_fcc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk_lecim_normalize_fcc_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk_lecim_normalize_fcc_sptr self, std::string name)"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk_lecim_normalize_fcc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk_lecim_normalize_fcc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk_lecim_normalize_fcc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk_lecim_normalize_fcc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_normalize_fcc_sptr_message_subscribers(self, which_port)

fsk_lecim_normalize_fcc_sptr_swigregister = _lpwan_swig.fsk_lecim_normalize_fcc_sptr_swigregister
fsk_lecim_normalize_fcc_sptr_swigregister(fsk_lecim_normalize_fcc_sptr)


fsk_lecim_normalize_fcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk_lecim_normalize_fcc = fsk_lecim_normalize_fcc.make;

class fsk_lecim_synchronizer_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_synchronizer_cc.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_synchronizer_cc's constructor is in a private implementation class. lpwan::fsk_lecim_synchronizer_cc::make is the public interface for creating new instances.

    Args:
        preamble : 
        sps : 
        threshold : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(preamble, sps, threshold):
        """
        make(pmt_vector_cfloat preamble, int sps, float threshold) -> fsk_lecim_synchronizer_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_synchronizer_cc.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_synchronizer_cc's constructor is in a private implementation class. lpwan::fsk_lecim_synchronizer_cc::make is the public interface for creating new instances.

        Args:
            preamble : 
            sps : 
            threshold : 
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_make(preamble, sps, threshold)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_synchronizer_cc
    __del__ = lambda self: None
fsk_lecim_synchronizer_cc_swigregister = _lpwan_swig.fsk_lecim_synchronizer_cc_swigregister
fsk_lecim_synchronizer_cc_swigregister(fsk_lecim_synchronizer_cc)

def fsk_lecim_synchronizer_cc_make(preamble, sps, threshold):
    """
    fsk_lecim_synchronizer_cc_make(pmt_vector_cfloat preamble, int sps, float threshold) -> fsk_lecim_synchronizer_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::fsk_lecim_synchronizer_cc.

    To avoid accidental use of raw pointers, lpwan::fsk_lecim_synchronizer_cc's constructor is in a private implementation class. lpwan::fsk_lecim_synchronizer_cc::make is the public interface for creating new instances.

    Args:
        preamble : 
        sps : 
        threshold : 
    """
    return _lpwan_swig.fsk_lecim_synchronizer_cc_make(preamble, sps, threshold)

class fsk_lecim_synchronizer_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::fsk_lecim_synchronizer_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_synchronizer_cc)> self) -> fsk_lecim_synchronizer_cc_sptr
        __init__(boost::shared_ptr<(gr::lpwan::fsk_lecim_synchronizer_cc)> self, fsk_lecim_synchronizer_cc p) -> fsk_lecim_synchronizer_cc_sptr
        """
        this = _lpwan_swig.new_fsk_lecim_synchronizer_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk_lecim_synchronizer_cc_sptr self) -> fsk_lecim_synchronizer_cc"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_fsk_lecim_synchronizer_cc_sptr
    __del__ = lambda self: None

    def make(self, preamble, sps, threshold):
        """
        make(fsk_lecim_synchronizer_cc_sptr self, pmt_vector_cfloat preamble, int sps, float threshold) -> fsk_lecim_synchronizer_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::fsk_lecim_synchronizer_cc.

        To avoid accidental use of raw pointers, lpwan::fsk_lecim_synchronizer_cc's constructor is in a private implementation class. lpwan::fsk_lecim_synchronizer_cc::make is the public interface for creating new instances.

        Args:
            preamble : 
            sps : 
            threshold : 
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_make(self, preamble, sps, threshold)


    def history(self):
        """history(fsk_lecim_synchronizer_cc_sptr self) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk_lecim_synchronizer_cc_sptr self, int which, int delay)
        declare_sample_delay(fsk_lecim_synchronizer_cc_sptr self, unsigned int delay)
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk_lecim_synchronizer_cc_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk_lecim_synchronizer_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk_lecim_synchronizer_cc_sptr self) -> double"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_relative_rate(self)


    def start(self):
        """start(fsk_lecim_synchronizer_cc_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_start(self)


    def stop(self):
        """stop(fsk_lecim_synchronizer_cc_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk_lecim_synchronizer_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk_lecim_synchronizer_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk_lecim_synchronizer_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk_lecim_synchronizer_cc_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk_lecim_synchronizer_cc_sptr self)"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk_lecim_synchronizer_cc_sptr self) -> bool"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk_lecim_synchronizer_cc_sptr self, int m)"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk_lecim_synchronizer_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk_lecim_synchronizer_cc_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk_lecim_synchronizer_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk_lecim_synchronizer_cc_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk_lecim_synchronizer_cc_sptr self, int i) -> long"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk_lecim_synchronizer_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk_lecim_synchronizer_cc_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk_lecim_synchronizer_cc_sptr self, int which) -> float
        pc_input_buffers_full(fsk_lecim_synchronizer_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk_lecim_synchronizer_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk_lecim_synchronizer_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk_lecim_synchronizer_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk_lecim_synchronizer_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk_lecim_synchronizer_cc_sptr self, int which) -> float
        pc_output_buffers_full(fsk_lecim_synchronizer_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk_lecim_synchronizer_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk_lecim_synchronizer_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk_lecim_synchronizer_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk_lecim_synchronizer_cc_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk_lecim_synchronizer_cc_sptr self) -> float"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk_lecim_synchronizer_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk_lecim_synchronizer_cc_sptr self)"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk_lecim_synchronizer_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk_lecim_synchronizer_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk_lecim_synchronizer_cc_sptr self) -> int"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk_lecim_synchronizer_cc_sptr self, int priority) -> int"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk_lecim_synchronizer_cc_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk_lecim_synchronizer_cc_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk_lecim_synchronizer_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk_lecim_synchronizer_cc_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk_lecim_synchronizer_cc_sptr self) -> long"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk_lecim_synchronizer_cc_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk_lecim_synchronizer_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk_lecim_synchronizer_cc_sptr self) -> std::string"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk_lecim_synchronizer_cc_sptr self, std::string name)"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk_lecim_synchronizer_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk_lecim_synchronizer_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk_lecim_synchronizer_cc_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk_lecim_synchronizer_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_message_subscribers(self, which_port)

fsk_lecim_synchronizer_cc_sptr_swigregister = _lpwan_swig.fsk_lecim_synchronizer_cc_sptr_swigregister
fsk_lecim_synchronizer_cc_sptr_swigregister(fsk_lecim_synchronizer_cc_sptr)


fsk_lecim_synchronizer_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk_lecim_synchronizer_cc = fsk_lecim_synchronizer_cc.make;

class sync(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::sync.

    To avoid accidental use of raw pointers, lpwan::sync's constructor is in a private implementation class. lpwan::sync::make is the public interface for creating new instances.

    Args:
        len_est : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len_est):
        """
        make(int len_est) -> sync_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::sync.

        To avoid accidental use of raw pointers, lpwan::sync's constructor is in a private implementation class. lpwan::sync::make is the public interface for creating new instances.

        Args:
            len_est : 
        """
        return _lpwan_swig.sync_make(len_est)

    make = staticmethod(make)
    __swig_destroy__ = _lpwan_swig.delete_sync
    __del__ = lambda self: None
sync_swigregister = _lpwan_swig.sync_swigregister
sync_swigregister(sync)

def sync_make(len_est):
    """
    sync_make(int len_est) -> sync_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lpwan::sync.

    To avoid accidental use of raw pointers, lpwan::sync's constructor is in a private implementation class. lpwan::sync::make is the public interface for creating new instances.

    Args:
        len_est : 
    """
    return _lpwan_swig.sync_make(len_est)

class sync_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lpwan::sync)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lpwan::sync)> self) -> sync_sptr
        __init__(boost::shared_ptr<(gr::lpwan::sync)> self, sync p) -> sync_sptr
        """
        this = _lpwan_swig.new_sync_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(sync_sptr self) -> sync"""
        return _lpwan_swig.sync_sptr___deref__(self)

    __swig_destroy__ = _lpwan_swig.delete_sync_sptr
    __del__ = lambda self: None

    def make(self, len_est):
        """
        make(sync_sptr self, int len_est) -> sync_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lpwan::sync.

        To avoid accidental use of raw pointers, lpwan::sync's constructor is in a private implementation class. lpwan::sync::make is the public interface for creating new instances.

        Args:
            len_est : 
        """
        return _lpwan_swig.sync_sptr_make(self, len_est)


    def history(self):
        """history(sync_sptr self) -> unsigned int"""
        return _lpwan_swig.sync_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sync_sptr self, int which, int delay)
        declare_sample_delay(sync_sptr self, unsigned int delay)
        """
        return _lpwan_swig.sync_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(sync_sptr self, int which) -> unsigned int"""
        return _lpwan_swig.sync_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(sync_sptr self) -> int"""
        return _lpwan_swig.sync_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(sync_sptr self) -> double"""
        return _lpwan_swig.sync_sptr_relative_rate(self)


    def start(self):
        """start(sync_sptr self) -> bool"""
        return _lpwan_swig.sync_sptr_start(self)


    def stop(self):
        """stop(sync_sptr self) -> bool"""
        return _lpwan_swig.sync_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _lpwan_swig.sync_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _lpwan_swig.sync_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(sync_sptr self) -> int"""
        return _lpwan_swig.sync_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(sync_sptr self, int m)"""
        return _lpwan_swig.sync_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sync_sptr self)"""
        return _lpwan_swig.sync_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sync_sptr self) -> bool"""
        return _lpwan_swig.sync_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(sync_sptr self, int m)"""
        return _lpwan_swig.sync_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(sync_sptr self) -> int"""
        return _lpwan_swig.sync_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(sync_sptr self, int i) -> long"""
        return _lpwan_swig.sync_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sync_sptr self, long max_output_buffer)
        set_max_output_buffer(sync_sptr self, int port, long max_output_buffer)
        """
        return _lpwan_swig.sync_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(sync_sptr self, int i) -> long"""
        return _lpwan_swig.sync_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sync_sptr self, long min_output_buffer)
        set_min_output_buffer(sync_sptr self, int port, long min_output_buffer)
        """
        return _lpwan_swig.sync_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sync_sptr self, int which) -> float
        pc_input_buffers_full(sync_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.sync_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(sync_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.sync_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sync_sptr self, int which) -> float
        pc_input_buffers_full_var(sync_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.sync_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sync_sptr self, int which) -> float
        pc_output_buffers_full(sync_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.sync_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(sync_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.sync_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sync_sptr self, int which) -> float
        pc_output_buffers_full_var(sync_sptr self) -> pmt_vector_float
        """
        return _lpwan_swig.sync_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(sync_sptr self) -> float"""
        return _lpwan_swig.sync_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lpwan_swig.sync_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(sync_sptr self)"""
        return _lpwan_swig.sync_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lpwan_swig.sync_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(sync_sptr self) -> int"""
        return _lpwan_swig.sync_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(sync_sptr self) -> int"""
        return _lpwan_swig.sync_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(sync_sptr self, int priority) -> int"""
        return _lpwan_swig.sync_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(sync_sptr self) -> std::string"""
        return _lpwan_swig.sync_sptr_name(self)


    def symbol_name(self):
        """symbol_name(sync_sptr self) -> std::string"""
        return _lpwan_swig.sync_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(sync_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.sync_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(sync_sptr self) -> io_signature_sptr"""
        return _lpwan_swig.sync_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(sync_sptr self) -> long"""
        return _lpwan_swig.sync_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(sync_sptr self) -> basic_block_sptr"""
        return _lpwan_swig.sync_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _lpwan_swig.sync_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(sync_sptr self) -> std::string"""
        return _lpwan_swig.sync_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(sync_sptr self, std::string name)"""
        return _lpwan_swig.sync_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(sync_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lpwan_swig.sync_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(sync_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.sync_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(sync_sptr self) -> swig_int_ptr"""
        return _lpwan_swig.sync_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(sync_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lpwan_swig.sync_sptr_message_subscribers(self, which_port)

sync_sptr_swigregister = _lpwan_swig.sync_sptr_swigregister
sync_sptr_swigregister(sync_sptr)


sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sync = sync.make;



